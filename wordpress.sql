/*
Navicat MySQL Data Transfer

Source Server         : local
Source Server Version : 50717
Source Host           : localhost:3306
Source Database       : wordpress

Target Server Type    : MYSQL
Target Server Version : 50717
File Encoding         : 65001

Date: 2018-05-09 09:12:02
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for wp_commentmeta
-- ----------------------------
DROP TABLE IF EXISTS `wp_commentmeta`;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_commentmeta
-- ----------------------------

-- ----------------------------
-- Table structure for wp_comments
-- ----------------------------
DROP TABLE IF EXISTS `wp_comments`;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_comments
-- ----------------------------

-- ----------------------------
-- Table structure for wp_links
-- ----------------------------
DROP TABLE IF EXISTS `wp_links`;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_notes` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_links
-- ----------------------------
INSERT INTO `wp_links` VALUES ('2', 'http://cn.wordpress.org/', 'WordPress China 博客', '', '', '', 'Y', '1', '0', '0000-00-00 00:00:00', '', '', 'http://cn.wordpress.org/feed/');

-- ----------------------------
-- Table structure for wp_options
-- ----------------------------
DROP TABLE IF EXISTS `wp_options`;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `option_value` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`)
) ENGINE=InnoDB AUTO_INCREMENT=1300 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_options
-- ----------------------------
INSERT INTO `wp_options` VALUES ('1', 'siteurl', 'http://blog.qicheen.com', 'yes');
INSERT INTO `wp_options` VALUES ('2', 'blogname', 'NodeSharp', 'yes');
INSERT INTO `wp_options` VALUES ('3', 'blogdescription', '一直在学习的程序员', 'yes');
INSERT INTO `wp_options` VALUES ('4', 'users_can_register', '0', 'yes');
INSERT INTO `wp_options` VALUES ('5', 'admin_email', '970677650@qq.com', 'yes');
INSERT INTO `wp_options` VALUES ('6', 'start_of_week', '1', 'yes');
INSERT INTO `wp_options` VALUES ('7', 'use_balanceTags', '0', 'yes');
INSERT INTO `wp_options` VALUES ('8', 'use_smilies', '1', 'yes');
INSERT INTO `wp_options` VALUES ('9', 'require_name_email', '', 'yes');
INSERT INTO `wp_options` VALUES ('10', 'comments_notify', '1', 'yes');
INSERT INTO `wp_options` VALUES ('11', 'posts_per_rss', '10', 'yes');
INSERT INTO `wp_options` VALUES ('12', 'rss_use_excerpt', '0', 'yes');
INSERT INTO `wp_options` VALUES ('13', 'mailserver_url', 'mail.example.com', 'yes');
INSERT INTO `wp_options` VALUES ('14', 'mailserver_login', 'login@example.com', 'yes');
INSERT INTO `wp_options` VALUES ('15', 'mailserver_pass', 'password', 'yes');
INSERT INTO `wp_options` VALUES ('16', 'mailserver_port', '110', 'yes');
INSERT INTO `wp_options` VALUES ('17', 'default_category', '1', 'yes');
INSERT INTO `wp_options` VALUES ('18', 'default_comment_status', 'closed', 'yes');
INSERT INTO `wp_options` VALUES ('19', 'default_ping_status', 'closed', 'yes');
INSERT INTO `wp_options` VALUES ('20', 'default_pingback_flag', '', 'yes');
INSERT INTO `wp_options` VALUES ('22', 'posts_per_page', '10', 'yes');
INSERT INTO `wp_options` VALUES ('23', 'date_format', 'Y-m-d', 'yes');
INSERT INTO `wp_options` VALUES ('24', 'time_format', 'H:i', 'yes');
INSERT INTO `wp_options` VALUES ('25', 'links_updated_date_format', 'Y 年 n 月 j 日a g:i', 'yes');
INSERT INTO `wp_options` VALUES ('29', 'comment_moderation', '', 'yes');
INSERT INTO `wp_options` VALUES ('30', 'moderation_notify', '1', 'yes');
INSERT INTO `wp_options` VALUES ('31', 'permalink_structure', '', 'yes');
INSERT INTO `wp_options` VALUES ('33', 'hack_file', '0', 'yes');
INSERT INTO `wp_options` VALUES ('34', 'blog_charset', 'UTF-8', 'yes');
INSERT INTO `wp_options` VALUES ('35', 'moderation_keys', '', 'no');
INSERT INTO `wp_options` VALUES ('36', 'active_plugins', 'a:1:{i:0;s:27:\"codecolorer/codecolorer.php\";}', 'yes');
INSERT INTO `wp_options` VALUES ('37', 'home', 'http://blog.qicheen.com', 'yes');
INSERT INTO `wp_options` VALUES ('38', 'category_base', '', 'yes');
INSERT INTO `wp_options` VALUES ('39', 'ping_sites', 'http://rpc.pingomatic.com/', 'yes');
INSERT INTO `wp_options` VALUES ('41', 'comment_max_links', '2', 'yes');
INSERT INTO `wp_options` VALUES ('42', 'gmt_offset', '', 'yes');
INSERT INTO `wp_options` VALUES ('43', 'default_email_category', '1', 'yes');
INSERT INTO `wp_options` VALUES ('44', 'recently_edited', 'a:4:{i:0;s:67:\"C:\\app\\php\\test\\wordpress/wp-content/themes/twentysixteen/style.css\";i:1;s:64:\"C:\\app\\php\\test\\wordpress/wp-content/plugins/akismet/akismet.php\";i:2;s:62:\"/data1/www/htdocs/961/yzxy/3/wp-content/themes/inove/style.css\";i:3;s:0:\"\";}', 'no');
INSERT INTO `wp_options` VALUES ('45', 'template', 'twentysixteen', 'yes');
INSERT INTO `wp_options` VALUES ('46', 'stylesheet', 'twentysixteen', 'yes');
INSERT INTO `wp_options` VALUES ('47', 'comment_whitelist', '1', 'yes');
INSERT INTO `wp_options` VALUES ('48', 'blacklist_keys', '', 'no');
INSERT INTO `wp_options` VALUES ('49', 'comment_registration', '', 'yes');
INSERT INTO `wp_options` VALUES ('50', 'html_type', 'text/html', 'yes');
INSERT INTO `wp_options` VALUES ('51', 'use_trackback', '0', 'yes');
INSERT INTO `wp_options` VALUES ('52', 'default_role', 'subscriber', 'yes');
INSERT INTO `wp_options` VALUES ('53', 'db_version', '38590', 'yes');
INSERT INTO `wp_options` VALUES ('54', 'uploads_use_yearmonth_folders', '1', 'yes');
INSERT INTO `wp_options` VALUES ('55', 'upload_path', '', 'yes');
INSERT INTO `wp_options` VALUES ('56', 'blog_public', '1', 'yes');
INSERT INTO `wp_options` VALUES ('57', 'default_link_category', '2', 'yes');
INSERT INTO `wp_options` VALUES ('58', 'show_on_front', 'posts', 'yes');
INSERT INTO `wp_options` VALUES ('59', 'tag_base', '', 'yes');
INSERT INTO `wp_options` VALUES ('60', 'show_avatars', '1', 'yes');
INSERT INTO `wp_options` VALUES ('61', 'avatar_rating', 'G', 'yes');
INSERT INTO `wp_options` VALUES ('62', 'upload_url_path', '', 'yes');
INSERT INTO `wp_options` VALUES ('63', 'thumbnail_size_w', '150', 'yes');
INSERT INTO `wp_options` VALUES ('64', 'thumbnail_size_h', '150', 'yes');
INSERT INTO `wp_options` VALUES ('65', 'thumbnail_crop', '1', 'yes');
INSERT INTO `wp_options` VALUES ('66', 'medium_size_w', '300', 'yes');
INSERT INTO `wp_options` VALUES ('67', 'medium_size_h', '300', 'yes');
INSERT INTO `wp_options` VALUES ('68', 'avatar_default', 'mystery', 'yes');
INSERT INTO `wp_options` VALUES ('71', 'large_size_w', '1024', 'yes');
INSERT INTO `wp_options` VALUES ('72', 'large_size_h', '1024', 'yes');
INSERT INTO `wp_options` VALUES ('73', 'image_default_link_type', 'file', 'yes');
INSERT INTO `wp_options` VALUES ('74', 'image_default_size', '', 'yes');
INSERT INTO `wp_options` VALUES ('75', 'image_default_align', '', 'yes');
INSERT INTO `wp_options` VALUES ('76', 'close_comments_for_old_posts', '', 'yes');
INSERT INTO `wp_options` VALUES ('77', 'close_comments_days_old', '14', 'yes');
INSERT INTO `wp_options` VALUES ('78', 'thread_comments', '1', 'yes');
INSERT INTO `wp_options` VALUES ('79', 'thread_comments_depth', '5', 'yes');
INSERT INTO `wp_options` VALUES ('80', 'page_comments', '', 'yes');
INSERT INTO `wp_options` VALUES ('81', 'comments_per_page', '50', 'yes');
INSERT INTO `wp_options` VALUES ('82', 'default_comments_page', 'newest', 'yes');
INSERT INTO `wp_options` VALUES ('83', 'comment_order', 'asc', 'yes');
INSERT INTO `wp_options` VALUES ('84', 'sticky_posts', 'a:0:{}', 'yes');
INSERT INTO `wp_options` VALUES ('85', 'widget_categories', 'a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('86', 'widget_text', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('87', 'widget_rss', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('88', 'uninstall_plugins', 'a:0:{}', 'no');
INSERT INTO `wp_options` VALUES ('89', 'timezone_string', 'Asia/Shanghai', 'yes');
INSERT INTO `wp_options` VALUES ('91', 'embed_size_w', '', 'yes');
INSERT INTO `wp_options` VALUES ('92', 'embed_size_h', '600', 'yes');
INSERT INTO `wp_options` VALUES ('93', 'page_for_posts', '0', 'yes');
INSERT INTO `wp_options` VALUES ('94', 'page_on_front', '0', 'yes');
INSERT INTO `wp_options` VALUES ('95', 'default_post_format', '0', 'yes');
INSERT INTO `wp_options` VALUES ('96', 'initial_db_version', '21115', 'yes');
INSERT INTO `wp_options` VALUES ('97', 'wp_user_roles', 'a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:61:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}', 'yes');
INSERT INTO `wp_options` VALUES ('98', 'widget_search', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('99', 'widget_recent-posts', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('100', 'widget_recent-comments', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('101', 'widget_archives', 'a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('102', 'widget_meta', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('103', 'sidebars_widgets', 'a:5:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:4:{i:0;s:10:\"archives-2\";i:1;s:12:\"categories-2\";i:2;s:11:\"tag_cloud-2\";i:3;s:7:\"pages-3\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}s:13:\"array_version\";i:3;}', 'yes');
INSERT INTO `wp_options` VALUES ('104', 'cron', 'a:5:{i:1525846457;a:1:{s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1525866604;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1525866610;a:1:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1525868429;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}', 'yes');
INSERT INTO `wp_options` VALUES ('105', 'dashboard_widget_options', 'a:3:{s:25:\"dashboard_recent_comments\";a:1:{s:5:\"items\";i:5;}s:24:\"dashboard_incoming_links\";a:5:{s:4:\"home\";s:23:\"http://blog.qicheen.com\";s:4:\"link\";s:99:\"http://blogsearch.google.com/blogsearch?scoring=d&partner=wordpress&q=link:http://blog.qicheen.com/\";s:3:\"url\";s:132:\"http://blogsearch.google.com/blogsearch_feeds?scoring=d&ie=utf-8&num=10&output=rss&partner=wordpress&q=link:http://blog.qicheen.com/\";s:5:\"items\";i:10;s:9:\"show_date\";b:0;}s:17:\"dashboard_primary\";a:7:{s:4:\"link\";s:18:\"http://wp4sae.org/\";s:3:\"url\";s:23:\"http://wp4sae.org/feed/\";s:5:\"title\";s:22:\"WordPress for SAE Blog\";s:5:\"items\";i:2;s:12:\"show_summary\";i:1;s:11:\"show_author\";i:0;s:9:\"show_date\";i:1;}}', 'yes');
INSERT INTO `wp_options` VALUES ('107', 'theme_mods_twentyeleven', 'a:1:{s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1483617057;s:4:\"data\";a:6:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}s:9:\"sidebar-4\";a:0:{}s:9:\"sidebar-5\";a:0:{}}}}', 'yes');
INSERT INTO `wp_options` VALUES ('108', 'current_theme', 'Twenty Sixteen', 'yes');
INSERT INTO `wp_options` VALUES ('109', 'theme_mods_HelloMetro', 'a:2:{i:0;b:0;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1483617477;s:4:\"data\";a:4:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:0:{}}}}', 'yes');
INSERT INTO `wp_options` VALUES ('110', 'theme_switched', '', 'yes');
INSERT INTO `wp_options` VALUES ('111', '_is_widget_active_', '1', 'yes');
INSERT INTO `wp_options` VALUES ('112', 'theme_mods_inove', 'a:2:{i:0;b:0;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1510812938;s:4:\"data\";a:5:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:2:{i:0;s:10:\"archives-2\";i:1;s:12:\"categories-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:1:{i:0;s:10:\"calendar-2\";}s:9:\"sidebar-4\";a:0:{}}}}', 'yes');
INSERT INTO `wp_options` VALUES ('114', 'inove_options', 'a:29:{s:10:\"google_cse\";b:0;s:13:\"google_cse_cx\";s:0:\"\";s:9:\"menu_type\";s:5:\"pages\";s:9:\"nosidebar\";b:0;s:6:\"notice\";b:0;s:14:\"notice_content\";s:0:\"\";s:17:\"banner_registered\";b:0;s:18:\"banner_commentator\";b:0;s:14:\"banner_visitor\";b:0;s:14:\"banner_content\";s:0:\"\";s:19:\"showcase_registered\";b:0;s:20:\"showcase_commentator\";b:0;s:16:\"showcase_visitor\";b:0;s:16:\"showcase_caption\";b:0;s:14:\"showcase_title\";s:0:\"\";s:16:\"showcase_content\";s:0:\"\";s:6:\"author\";b:1;s:10:\"categories\";b:1;s:4:\"tags\";b:1;s:9:\"ctrlentry\";b:0;s:12:\"feed_readers\";b:1;s:4:\"feed\";b:0;s:8:\"feed_url\";s:0:\"\";s:10:\"feed_email\";b:0;s:14:\"feed_url_email\";s:0:\"\";s:7:\"twitter\";b:0;s:16:\"twitter_username\";s:0:\"\";s:9:\"analytics\";b:0;s:17:\"analytics_content\";s:0:\"\";}', 'yes');
INSERT INTO `wp_options` VALUES ('115', 'widget_calendar', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('118', 'rewrite_rules', '', 'yes');
INSERT INTO `wp_options` VALUES ('119', 'recently_activated', 'a:1:{s:44:\"wp-code-highlightjs/wp_code_highlight.js.php\";i:1510814284;}', 'yes');
INSERT INTO `wp_options` VALUES ('120', 'lightbox_2_theme_path', '/data1/www/htdocs/961/yzxy/3/wp-content/plugins/lightbox-2/Themes', 'yes');
INSERT INTO `wp_options` VALUES ('121', 'lightbox_2_theme', 'Black', 'yes');
INSERT INTO `wp_options` VALUES ('122', 'lightbox_2_automate', '1', 'yes');
INSERT INTO `wp_options` VALUES ('123', 'lightbox_2_resize_on_demand', '0', 'yes');
INSERT INTO `wp_options` VALUES ('124', 'cb_default_setting', '1', 'yes');
INSERT INTO `wp_options` VALUES ('125', 'cb_colla', 'on', 'yes');
INSERT INTO `wp_options` VALUES ('126', 'cb_highlight', '', 'yes');
INSERT INTO `wp_options` VALUES ('127', 'cb_caps', 'GESHI_CAPS_NO_CHANGE', 'yes');
INSERT INTO `wp_options` VALUES ('128', 'cb_tab_width', '2', 'yes');
INSERT INTO `wp_options` VALUES ('129', 'cb_keywords_link', 'on', 'yes');
INSERT INTO `wp_options` VALUES ('130', 'cb_plain_txt', 'on', 'yes');
INSERT INTO `wp_options` VALUES ('131', 'cb_line', 'on', 'yes');
INSERT INTO `wp_options` VALUES ('132', 'cb_wrap_over', '', 'yes');
INSERT INTO `wp_options` VALUES ('133', 'cb_strict', '', 'yes');
INSERT INTO `wp_options` VALUES ('134', 'category_children', 'a:0:{}', 'yes');
INSERT INTO `wp_options` VALUES ('135', 'widget_pages', 'a:2:{s:12:\"_multiwidget\";i:1;i:3;a:0:{}}', 'yes');
INSERT INTO `wp_options` VALUES ('136', 'widget_links', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('137', 'widget_media_audio', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('138', 'widget_media_image', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('139', 'widget_media_gallery', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('140', 'widget_media_video', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('141', 'widget_tag_cloud', 'a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"taxonomy\";s:8:\"post_tag\";}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('142', 'widget_nav_menu', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('143', 'widget_custom_html', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES ('154', 'link_manager_enabled', '1', 'yes');
INSERT INTO `wp_options` VALUES ('155', 'finished_splitting_shared_terms', '1', 'yes');
INSERT INTO `wp_options` VALUES ('156', 'site_icon', '0', 'yes');
INSERT INTO `wp_options` VALUES ('157', 'medium_large_size_w', '768', 'yes');
INSERT INTO `wp_options` VALUES ('158', 'medium_large_size_h', '0', 'yes');
INSERT INTO `wp_options` VALUES ('159', 'WPLANG', 'zh_CN', 'yes');
INSERT INTO `wp_options` VALUES ('160', 'db_upgraded', '', 'yes');
INSERT INTO `wp_options` VALUES ('166', 'can_compress_scripts', '0', 'no');
INSERT INTO `wp_options` VALUES ('179', 'theme_mods_twentyseventeen', 'a:3:{i:0;b:0;s:18:\"nav_menu_locations\";a:0:{}s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1510813096;s:4:\"data\";a:4:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:2:{i:0;s:10:\"archives-2\";i:1;s:12:\"categories-2\";}s:9:\"sidebar-2\";a:0:{}s:9:\"sidebar-3\";a:1:{i:0;s:10:\"calendar-2\";}}}}', 'yes');
INSERT INTO `wp_options` VALUES ('181', 'theme_mods_twentysixteen', 'a:6:{i:0;b:0;s:18:\"nav_menu_locations\";a:0:{}s:18:\"custom_css_post_id\";i:-1;s:16:\"background_color\";s:6:\"d6d6d6\";s:21:\"page_background_color\";s:7:\"#dbdbdb\";s:15:\"main_text_color\";s:7:\"#420028\";}', 'yes');
INSERT INTO `wp_options` VALUES ('195', 'fresh_site', '0', 'yes');
INSERT INTO `wp_options` VALUES ('211', 'codecolorer_css_style', '', 'yes');
INSERT INTO `wp_options` VALUES ('212', 'codecolorer_css_class', '', 'yes');
INSERT INTO `wp_options` VALUES ('213', 'codecolorer_lines_to_scroll', '20', 'yes');
INSERT INTO `wp_options` VALUES ('214', 'codecolorer_width', '435', 'yes');
INSERT INTO `wp_options` VALUES ('215', 'codecolorer_height', '300', 'yes');
INSERT INTO `wp_options` VALUES ('216', 'codecolorer_rss_width', '435', 'yes');
INSERT INTO `wp_options` VALUES ('217', 'codecolorer_line_numbers', '', 'yes');
INSERT INTO `wp_options` VALUES ('218', 'codecolorer_disable_keyword_linking', '', 'yes');
INSERT INTO `wp_options` VALUES ('219', 'codecolorer_tab_size', '4', 'yes');
INSERT INTO `wp_options` VALUES ('220', 'codecolorer_theme', '', 'yes');
INSERT INTO `wp_options` VALUES ('221', 'codecolorer_inline_theme', '', 'yes');
INSERT INTO `wp_options` VALUES ('222', 'codecolorer_language_notification', '1', 'yes');
INSERT INTO `wp_options` VALUES ('223', 'codecolorer_concurrent_notification', '1', 'yes');
INSERT INTO `wp_options` VALUES ('233', 'new_admin_email', '970677650@qq.com', 'yes');
INSERT INTO `wp_options` VALUES ('463', 'auto_core_update_notified', 'a:4:{s:4:\"type\";s:7:\"success\";s:5:\"email\";s:16:\"970677650@qq.com\";s:7:\"version\";s:5:\"4.9.3\";s:9:\"timestamp\";i:1517869121;}', 'no');
INSERT INTO `wp_options` VALUES ('1247', '_site_transient_timeout_browser_f4ca45eee0e550e19d93d0a3d59407fa', '1526214786', 'no');
INSERT INTO `wp_options` VALUES ('1248', '_site_transient_browser_f4ca45eee0e550e19d93d0a3d59407fa', 'a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"66.0.3359.139\";s:8:\"platform\";s:7:\"Windows\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}', 'no');
INSERT INTO `wp_options` VALUES ('1263', '_site_transient_update_core', 'O:8:\"stdClass\":4:{s:7:\"updates\";a:1:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.9.5.zip\";s:6:\"locale\";s:5:\"zh_CN\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.9.5.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.9.5-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.9.5-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.9.5\";s:7:\"version\";s:5:\"4.9.5\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.7\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1525824583;s:15:\"version_checked\";s:5:\"4.9.5\";s:12:\"translations\";a:0:{}}', 'no');
INSERT INTO `wp_options` VALUES ('1266', '_transient_is_multi_author', '0', 'yes');
INSERT INTO `wp_options` VALUES ('1267', '_transient_twentysixteen_categories', '1', 'yes');
INSERT INTO `wp_options` VALUES ('1296', '_site_transient_timeout_theme_roots', '1525826385', 'no');
INSERT INTO `wp_options` VALUES ('1297', '_site_transient_theme_roots', 'a:3:{s:13:\"twentyfifteen\";s:7:\"/themes\";s:15:\"twentyseventeen\";s:7:\"/themes\";s:13:\"twentysixteen\";s:7:\"/themes\";}', 'no');
INSERT INTO `wp_options` VALUES ('1298', '_site_transient_update_themes', 'O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1525824588;s:7:\"checked\";a:3:{s:13:\"twentyfifteen\";s:3:\"1.9\";s:15:\"twentyseventeen\";s:3:\"1.4\";s:13:\"twentysixteen\";s:3:\"1.4\";}s:8:\"response\";a:1:{s:15:\"twentyseventeen\";a:4:{s:5:\"theme\";s:15:\"twentyseventeen\";s:11:\"new_version\";s:3:\"1.5\";s:3:\"url\";s:45:\"https://wordpress.org/themes/twentyseventeen/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/theme/twentyseventeen.1.5.zip\";}}s:12:\"translations\";a:0:{}}', 'no');
INSERT INTO `wp_options` VALUES ('1299', '_site_transient_update_plugins', 'O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1525824590;s:7:\"checked\";a:4:{s:19:\"akismet/akismet.php\";s:5:\"4.0.1\";s:27:\"codecolorer/codecolorer.php\";s:6:\"0.9.14\";s:9:\"hello.php\";s:3:\"1.6\";s:44:\"wp-code-highlightjs/wp_code_highlight.js.php\";s:5:\"0.6.2\";}s:8:\"response\";a:2:{s:19:\"akismet/akismet.php\";O:8:\"stdClass\":12:{s:2:\"id\";s:21:\"w.org/plugins/akismet\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:5:\"4.0.3\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:56:\"https://downloads.wordpress.org/plugin/akismet.4.0.3.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:59:\"https://ps.w.org/akismet/assets/icon-256x256.png?rev=969272\";s:2:\"1x\";s:59:\"https://ps.w.org/akismet/assets/icon-128x128.png?rev=969272\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:61:\"https://ps.w.org/akismet/assets/banner-772x250.jpg?rev=479904\";}s:11:\"banners_rtl\";a:0:{}s:6:\"tested\";s:5:\"4.9.5\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";O:8:\"stdClass\":0:{}}s:27:\"codecolorer/codecolorer.php\";O:8:\"stdClass\":12:{s:2:\"id\";s:25:\"w.org/plugins/codecolorer\";s:4:\"slug\";s:11:\"codecolorer\";s:6:\"plugin\";s:27:\"codecolorer/codecolorer.php\";s:11:\"new_version\";s:6:\"0.9.15\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/codecolorer/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/codecolorer.0.9.15.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:64:\"https://ps.w.org/codecolorer/assets/icon-256x256.png?rev=1705147\";s:2:\"1x\";s:64:\"https://ps.w.org/codecolorer/assets/icon-128x128.png?rev=1705164\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:67:\"https://ps.w.org/codecolorer/assets/banner-1544x500.png?rev=1705292\";s:2:\"1x\";s:66:\"https://ps.w.org/codecolorer/assets/banner-772x250.png?rev=1705292\";}s:11:\"banners_rtl\";a:0:{}s:6:\"tested\";s:5:\"4.9.5\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";O:8:\"stdClass\":0:{}}}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:2:{s:9:\"hello.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:25:\"w.org/plugins/hello-dolly\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:63:\"https://ps.w.org/hello-dolly/assets/icon-256x256.jpg?rev=969907\";s:2:\"1x\";s:63:\"https://ps.w.org/hello-dolly/assets/icon-128x128.jpg?rev=969907\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:65:\"https://ps.w.org/hello-dolly/assets/banner-772x250.png?rev=478342\";}s:11:\"banners_rtl\";a:0:{}}s:44:\"wp-code-highlightjs/wp_code_highlight.js.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:33:\"w.org/plugins/wp-code-highlightjs\";s:4:\"slug\";s:19:\"wp-code-highlightjs\";s:6:\"plugin\";s:44:\"wp-code-highlightjs/wp_code_highlight.js.php\";s:11:\"new_version\";s:5:\"0.6.2\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/wp-code-highlightjs/\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/plugin/wp-code-highlightjs.zip\";s:5:\"icons\";a:1:{s:7:\"default\";s:63:\"https://s.w.org/plugins/geopattern-icon/wp-code-highlightjs.svg\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}}}}', 'no');

-- ----------------------------
-- Table structure for wp_postmeta
-- ----------------------------
DROP TABLE IF EXISTS `wp_postmeta`;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_postmeta
-- ----------------------------
INSERT INTO `wp_postmeta` VALUES ('1', '2', '_wp_page_template', 'default');
INSERT INTO `wp_postmeta` VALUES ('5', '2', '_edit_lock', '1510816708:1');
INSERT INTO `wp_postmeta` VALUES ('6', '7', '_wp_attached_file', '2017/01/02.jpg');
INSERT INTO `wp_postmeta` VALUES ('7', '7', '_wp_attachment_metadata', 'a:6:{s:5:\"width\";s:4:\"2000\";s:6:\"height\";s:4:\"1333\";s:14:\"hwstring_small\";s:23:\"height=\'85\' width=\'128\'\";s:4:\"file\";s:14:\"2017/01/02.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:14:\"02-150x150.jpg\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:14:\"02-300x199.jpg\";s:5:\"width\";s:3:\"300\";s:6:\"height\";s:3:\"199\";}s:5:\"large\";a:3:{s:4:\"file\";s:15:\"02-1024x682.jpg\";s:5:\"width\";s:4:\"1024\";s:6:\"height\";s:3:\"682\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}');
INSERT INTO `wp_postmeta` VALUES ('8', '2', '_edit_last', '1');
INSERT INTO `wp_postmeta` VALUES ('12', '14', '_edit_last', '1');
INSERT INTO `wp_postmeta` VALUES ('13', '14', '_edit_lock', '1510816854:1');
INSERT INTO `wp_postmeta` VALUES ('14', '35', '_wp_attached_file', '2017/02/QQ截图20170217171813.png');
INSERT INTO `wp_postmeta` VALUES ('15', '35', '_wp_attachment_metadata', 'a:6:{s:5:\"width\";s:3:\"791\";s:6:\"height\";s:3:\"225\";s:14:\"hwstring_small\";s:23:\"height=\'36\' width=\'128\'\";s:4:\"file\";s:34:\"2017/02/QQ截图20170217171813.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:34:\"QQ截图20170217171813-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:33:\"QQ截图20170217171813-300x85.png\";s:5:\"width\";s:3:\"300\";s:6:\"height\";s:2:\"85\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}');
INSERT INTO `wp_postmeta` VALUES ('17', '47', '_wp_attached_file', '2017/02/QQ截图20170223132108.png');
INSERT INTO `wp_postmeta` VALUES ('18', '47', '_wp_attachment_metadata', 'a:6:{s:5:\"width\";s:3:\"251\";s:6:\"height\";s:3:\"333\";s:14:\"hwstring_small\";s:22:\"height=\'96\' width=\'72\'\";s:4:\"file\";s:34:\"2017/02/QQ截图20170223132108.png\";s:5:\"sizes\";a:2:{s:9:\"thumbnail\";a:3:{s:4:\"file\";s:34:\"QQ截图20170223132108-150x150.png\";s:5:\"width\";s:3:\"150\";s:6:\"height\";s:3:\"150\";}s:6:\"medium\";a:3:{s:4:\"file\";s:34:\"QQ截图20170223132108-226x300.png\";s:5:\"width\";s:3:\"226\";s:6:\"height\";s:3:\"300\";}}s:10:\"image_meta\";a:10:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";}}');
INSERT INTO `wp_postmeta` VALUES ('19', '47', '_wp_attachment_image_alt', '子进程对象');
INSERT INTO `wp_postmeta` VALUES ('21', '53', '_edit_lock', '1510816958:1');
INSERT INTO `wp_postmeta` VALUES ('22', '53', '_edit_last', '1');

-- ----------------------------
-- Table structure for wp_posts
-- ----------------------------
DROP TABLE IF EXISTS `wp_posts`;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_title` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_excerpt` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `to_ping` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `pinged` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`),
  KEY `post_name` (`post_name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=78 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_posts
-- ----------------------------
INSERT INTO `wp_posts` VALUES ('2', '1', '2017-01-05 11:50:00', '2017-01-05 11:50:00', '<ul>\r\n	<li>Android入门级选手，高级C#er，也做过Java web，现在专心写nodejs</li>\r\n	<li></li>\r\n	<li>所以持续学习才是程序员的宿命啊...</li>\r\n	<li></li>\r\n	<li> 记录下自己很多时候想写没写的东西</li>\r\n	<li></li>\r\n	<li>整理一下，这些年的技术经验</li>\r\n	<li></li>\r\n	<li>希望能变成自己宝贵的财富</li>\r\n	<li></li>\r\n	<li>zhangyayun1@gmail.com</li>\r\n</ul>\r\n<div></div>\r\n<p style=\"text-align: left;\"></p>', '关于', '', 'publish', 'open', 'open', '', 'sample-page', '', '', '2017-08-07 18:07:01', '2017-08-07 10:07:01', '', '0', 'http://blog.qicheen.com/?page_id=2', '0', 'page', '', '0');
INSERT INTO `wp_posts` VALUES ('6', '1', '2017-02-20 12:47:00', '2017-02-20 04:47:00', '<ul>\n	<li>Android小白，中级C#，也做过Java web，现在专心写JS</li>\n	<li></li>\n	<li>所以持续学习才是程序员的宿命</li>\n	<li></li>\n	<li> 记录下自己很多时候想写没写的东西</li>\n	<li></li>\n	<li>整理一下，这些年的技术经验</li>\n	<li></li>\n	<li>希望能变成自己宝贵的财富</li>\n	<li></li>\n	<li>zhangyayun1@gmail.com</li>\n</ul>\n<div></div>\n<p style=\"text-align: left;\"></p>', '关于', '', 'inherit', 'open', 'open', '', '2-autosave', '', '', '2017-02-20 12:47:00', '2017-02-20 04:47:00', '', '2', 'http://blog.qicheen.com/archives/6', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('7', '1', '2017-01-05 20:31:41', '2017-01-05 12:31:41', '', '02', '', 'inherit', 'open', 'open', '', '02', '', '', '2017-01-05 20:31:41', '2017-01-05 12:31:41', '', '2', 'http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/01/02.jpg', '0', 'attachment', 'image/jpeg', '0');
INSERT INTO `wp_posts` VALUES ('8', '1', '2017-01-05 11:50:00', '2017-01-05 11:50:00', '这是示范页面。页面和博客文章不同，它的位置是固定的，通常会在站点导航栏显示。很多用户都创建一个“关于”页面，向访客介绍自己。例如，个人博客通常有类似这样的介绍：\n\n<blockquote>欢迎！我白天是个邮递员，晚上就是个有抱负的演员。这是我的博客。我住在天朝的帝都，有条叫做 Jack 的狗。</blockquote>\n\n... 公司博客可以这样写：\n\n<blockquote>XYZ Doohickey 公司成立于 1971 年，自从建立以来，我们一直向社会贡献着优秀 doohicky。我们的公司总部位于天朝魔都，有着超过两千名员工，对魔都政府税收有着巨大贡献。</blockquote>\n\n您可以访问<a href=\"http://blog.qicheen.com/wp-admin/\">仪表盘</a>，删除本页面，然后添加您自己的内容。祝您使用愉快！', '示例页面', '', 'inherit', 'open', 'open', '', '2-revision', '', '', '2017-01-05 11:50:00', '2017-01-05 11:50:00', '', '2', 'http://blog.qicheen.com/archives/8', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('9', '1', '2017-01-05 20:37:50', '2017-01-05 12:37:50', '<ul>\r\n	<li>写Node的C#程序员会Android</li>\r\n	<li></li>\r\n	<li> 记录下自己很多时候想写没写的东西</li>\r\n	<li></li>\r\n	<li>希望能变成自己宝贵的财富</li>\r\n</ul>\r\n<div></div>\r\n<p style=\"text-align: left;\"></p>', '示例页面', '', 'inherit', 'open', 'open', '', '2-revision-2', '', '', '2017-01-05 20:37:50', '2017-01-05 12:37:50', '', '2', 'http://blog.qicheen.com/archives/9', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('14', '1', '2017-02-17 18:15:19', '2017-02-17 10:15:19', '&nbsp;\r\n\r\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n 	<li>\r\n<h2>使用Edgejs</h2>\r\n</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\" rel=\"noopener\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<code lang=\"JavaScript\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</code>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n<code lang=\"javascript\">	\r\n    function loadDll(dllName){\r\n         var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</code>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\r\n\r\n示例如下\r\n<code lang=\"Java\">namespace demo\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task Invoke(dynamic data)\r\n        {\r\n           return await dosomething();\r\n         }\r\n    }\r\n}</code>\r\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\r\n<ul>\r\n 	<li>\r\n<h2> 使用子进程</h2>\r\n</li>\r\n</ul>\r\n这么好的解决方案用不了，只能想其他的办法了，首先想到的就是子进程，而且真的解决了我的问题，下面是自己的一点收获\r\n<ul>\r\n 	<li>初级版</li>\r\n</ul>\r\nnodejs使用子进程的方式一般是这样的\r\n<code lang=\"javascript\">	\r\n     var spawn = require(\"child_process\").spawn;\r\n     var exepath = \'exe地址\';\r\n     var args=[];     \r\n     var childprocess = spawn(exepath, args);</code>\r\n&nbsp;\r\n\r\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\r\n\r\n对的，就是通过 Main函数的参数获取\r\n\r\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\r\n\r\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\r\n\r\n也很简单，只要监听 子进程的 stdout的data事件，如下\r\n\r\nchildprocess.stdout.on(\'data\', function (data) {\r\n\r\nconsole.log(data);\r\n\r\n});\r\n<ul>\r\n 	<li> 高级版</li>\r\n</ul>\r\n上面是在程序运行之前就要确定需要传递的参数，所以功能有限，不够灵活，如果在exe已经运行的情况下，怎么进行数据交换呢？\r\n\r\n先来看看，在nodejs中启动exe子进程后的对象是什么样的\r\n<p style=\"text-align: center;\"><a href=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\"><img class=\"size-full wp-image-47 aligncenter\" title=\"ChildProcess\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\" alt=\"子进程对象\" width=\"251\" height=\"333\" /></a></p>\r\n 我们上面监听子进程输出用的是 stdout 这个Socket对象，这是一个只读的Socket，另外子进程对象还有个stdin，这是个只写的Socket，作用就是输入，对于这样的输入，C#中怎么获取呢？\r\n\r\n上面C#输出用的是 Console.WriteLine 标准输出，所以，我们用标准输入就可以了，C#标准输入 是 Console.ReadLine\r\n<ul>\r\n 	<li>终极版</li>\r\n</ul>\r\n至此，我们已经具备了所有与exe双向通讯的条件，但是如果只是简单的标准输入输出，很难与js配合处理复杂的业务场景，我们需要对这样的虚拟通道进行包装\r\n\r\n以我们使用nw下的一个场景，node将sql语句发送给子进程exe，子进程执行sql，完成后将结果返回给node，通过上面的方法，我们可以完成\r\n\r\nnode发送 -&gt;  C#处理  -&gt;  返回结果\r\n\r\n主要流程都没有问题，但是我们的sql语句发送是连续的，就是node会一直发送，exe进行多线程处理，但是完成后返回的结果就懵逼了，谁跟谁啊，完全不知道执行的结果是谁需要的\r\n\r\n&nbsp;\r\n\r\n针对这个问题，我们可以抽象下，以我们熟悉的   浏览器-&gt;服务器 来类比下，node中每个发送给子进程的sql就相当于一个 浏览器，子进程就相当于服务器，只要我们给每个请求都给一个令牌，在子进程处理后，包装结果，把令牌也同时返回，node这边根据令牌找到相应的方法回调，至此所有问题解决，exe具备了作为node的服务的能力\r\n\r\n相关解决方案及代码已开源，详见GitHub\r\n\r\n<a title=\"NodeSharp\" href=\"https://github.com/zyyc5/NodeSharp\" target=\"_blank\" rel=\"noopener\">NodeSharp</a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'publish', 'closed', 'closed', '', 'nodejs%e4%b8%8ec%e4%b9%8b%e9%97%b4%e9%80%9a%e4%bf%a1%e5%ae%9e%e7%8e%b0%e6%96%b9%e5%bc%8f', '', '', '2017-11-16 14:40:42', '2017-11-16 06:40:42', '', '0', 'http://blog.qicheen.com/?p=14', '0', 'post', '', '0');
INSERT INTO `wp_posts` VALUES ('15', '1', '2017-02-17 13:14:22', '2017-02-17 05:14:22', '&nbsp;\n\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nw的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>1</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 13:14:22', '2017-02-17 05:14:22', '', '14', 'http://blog.qicheen.com/archives/15', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('16', '1', '2017-02-17 14:00:22', '2017-02-17 06:00:22', '&nbsp;\n\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nw的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>1</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 14:00:22', '2017-02-17 06:00:22', '', '14', 'http://blog.qicheen.com/archives/16', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('18', '1', '2017-02-17 15:09:54', '2017-02-17 07:09:54', '&nbsp;\n\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nw的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>1</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:09:54', '2017-02-17 07:09:54', '', '14', 'http://blog.qicheen.com/archives/18', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('19', '1', '2017-02-17 15:20:59', '2017-02-17 07:20:59', '&nbsp;\n\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nw的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>1</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre>var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:20:59', '2017-02-17 07:20:59', '', '14', 'http://blog.qicheen.com/archives/19', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('20', '1', '2017-02-17 15:22:57', '2017-02-17 07:22:57', '&nbsp;\n\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nw的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>1</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre>var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dl\n\nfunction loadDll(dllName){\nvar dllImport = null;\nif(typeof(require) != \'undefined\'){\nvar edge = require(\'edge\');\ndllImport = edge.func(dllName);\n}\nreturn dllImport;\n};\n\nl\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:22:57', '2017-02-17 07:22:57', '', '14', 'http://blog.qicheen.com/archives/20', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('21', '1', '2017-02-17 15:26:55', '2017-02-17 07:26:55', '&nbsp;\r\n\r\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nw的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n	<li>1</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre>var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dl\r\n\r\n&nbsp;\r\n<pre lang=\"javascript\" line=\"1\" file=\"download.txt\" colla=\"+\"> \r\nfunction loadDll(dllName){\r\n	var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};\r\n</pre>\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:26:55', '2017-02-17 07:26:55', '', '14', 'http://blog.qicheen.com/archives/21', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('22', '1', '2017-02-17 15:27:31', '2017-02-17 07:27:31', '&nbsp;\r\n\r\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nw的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n	<li>1</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre>var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dl\r\n\r\n&nbsp;\r\n<pre lang=\"javascript\" line=\"1\"> \r\nfunction loadDll(dllName){\r\n	var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};\r\n</pre>\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:27:31', '2017-02-17 07:27:31', '', '14', 'http://blog.qicheen.com/archives/22', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('23', '1', '2017-02-17 15:27:55', '2017-02-17 07:27:55', '&nbsp;\r\n\r\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nw的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n	<li>1</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre>var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dl\r\n\r\n&nbsp;\r\n<pre lang=\"javascript\"> \r\nfunction loadDll(dllName){\r\n	var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};\r\n</pre>\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:27:55', '2017-02-17 07:27:55', '', '14', 'http://blog.qicheen.com/archives/23', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('24', '1', '2017-02-17 15:55:36', '2017-02-17 07:55:36', '&nbsp;\n\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>1</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px;\">function loadDll(dllName){</span>\n<pre lang=\"javascript\">	var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类\n\n实例如下\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:55:36', '2017-02-17 07:55:36', '', '14', 'http://blog.qicheen.com/archives/24', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('25', '1', '2017-02-17 15:56:30', '2017-02-17 07:56:30', '&nbsp;\r\n\r\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n	<li>1</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre lang=\"javascript\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px;\">function loadDll(dllName){</span>\r\n<pre lang=\"javascript\">	var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</pre>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类\r\n\r\n实例如下\r\n\r\n<pre lang=\"C#\">	public class Startup\r\n    {\r\n        /// <summary>\r\n        /// \r\n        /// </summary>\r\n        /// <param name=\"data\"> {command: \"write/read\", data: \"xxxxxx\", card:{type: \"m1/ic\"}} </param>\r\n        /// <returns></returns>\r\n        public async Task<object> Invoke(dynamic data)\r\n        {\r\n            string command = (string)data.command;\r\n            dynamic cardConfig = (dynamic)data.card;\r\n            if (command == \"write\")\r\n            {\r\n                string cardNo = (string)data.data;\r\n                return await this.writeCard(cardConfig, cardNo);\r\n            }\r\n            else if (command == \"read\")\r\n            {\r\n                return await this.readCard(cardConfig);\r\n            }\r\n            else if (command == \"open\")\r\n            {\r\n                Console.WriteLine(cardConfig.type);\r\n                return await this.openCard(cardConfig);\r\n            }\r\n            else\r\n            {\r\n                throw new InvalidOperationException(\"Unsupported type of command.\");\r\n            }\r\n        }\r\n}}</pre>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:56:30', '2017-02-17 07:56:30', '', '14', 'http://blog.qicheen.com/archives/25', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('26', '1', '2017-02-17 15:58:12', '2017-02-17 07:58:12', '&nbsp;\n\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>1</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px;\">function loadDll(dllName){</span>\n<pre lang=\"javascript\">	var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类\n\n实例如下\n\n<pre lang=\"C#\">\nnamespace RWCard\n{\n    public class Startup\n    {\n        public async Task<object> Invoke(dynamic data)\n        {\n            \n        }\n}\n}\n</pre>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:58:12', '2017-02-17 07:58:12', '', '14', 'http://blog.qicheen.com/archives/26', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('27', '1', '2017-02-17 15:58:18', '2017-02-17 07:58:18', '&nbsp;\r\n\r\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n	<li>1</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre lang=\"javascript\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px;\">function loadDll(dllName){</span>\r\n<pre lang=\"javascript\">	var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</pre>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类\r\n\r\n实例如下\r\n\r\n<pre lang=\"C#\">\r\nnamespace RWCard\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task<object> Invoke(dynamic data)\r\n        {\r\n            \r\n        }\r\n    }\r\n}\r\n</pre>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:58:18', '2017-02-17 07:58:18', '', '14', 'http://blog.qicheen.com/archives/27', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('28', '1', '2017-02-17 15:59:59', '2017-02-17 07:59:59', '&nbsp;\n\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>1</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px;\">function loadDll(dllName){</span>\n<pre lang=\"javascript\">	var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开 \n\n实例如下\n\n<pre lang=\"Java\">\nnamespace demo\n{\n    public class Startup\n    {\n        public async Task<object> Invoke(dynamic data)\n        {\n            \n        }\n    }\n}\n</pre>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 15:59:59', '2017-02-17 07:59:59', '', '14', 'http://blog.qicheen.com/archives/28', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('29', '1', '2017-02-17 16:00:04', '2017-02-17 08:00:04', '&nbsp;\r\n\r\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n	<li>1</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre lang=\"javascript\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n\r\n<span style=\"font-family: Consolas, Monaco, monospace; font-size: 12px;\">function loadDll(dllName){</span>\r\n<pre lang=\"javascript\">	var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</pre>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\r\n\r\n实例如下\r\n\r\n<pre lang=\"Java\">\r\nnamespace demo\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task<object> Invoke(dynamic data)\r\n        {\r\n            \r\n        }\r\n    }\r\n}\r\n</pre>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 16:00:04', '2017-02-17 08:00:04', '', '14', 'http://blog.qicheen.com/archives/29', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('30', '1', '2017-02-17 16:02:50', '2017-02-17 08:02:50', '&nbsp;\r\n\r\n需求背景：我们产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n	<li>1</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre lang=\"javascript\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n\r\n<pre lang=\"javascript\">	function loadDll(dllName){var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</pre>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\r\n\r\n实例如下\r\n\r\n<pre lang=\"Java\">\r\nnamespace demo\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task<object> Invoke(dynamic data)\r\n        {\r\n            \r\n        }\r\n    }\r\n}\r\n</pre>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 16:02:50', '2017-02-17 08:02:50', '', '14', 'http://blog.qicheen.com/archives/30', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('31', '1', '2017-02-17 16:09:27', '2017-02-17 08:09:27', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>1</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<pre lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n实例如下\n<pre lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task \n\n</pre>\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 16:09:27', '2017-02-17 08:09:27', '', '14', 'http://blog.qicheen.com/archives/31', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('32', '1', '2017-02-17 16:11:07', '2017-02-17 08:11:07', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>1</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<pre lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n实例如下\n<pre lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task</pre>\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 16:11:07', '2017-02-17 08:11:07', '', '14', 'http://blog.qicheen.com/archives/32', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('33', '1', '2017-02-17 16:27:59', '2017-02-17 08:27:59', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>使用Edgejs</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<pre lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n示例如下\n<pre lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task Invoke(dynamic data)\n        {\n         }\n    }\n}</pre>\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 16:27:59', '2017-02-17 08:27:59', '', '14', 'http://blog.qicheen.com/archives/33', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('34', '1', '2017-02-17 17:00:09', '2017-02-17 09:00:09', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>\n<h2>使用Edgejs</h2>\n</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<pre lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n示例如下\n<pre lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task Invoke(dynamic data)\n        {\n           return await dosomething();\n         }\n    }\n}</pre>\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\n<ul>\n	<li>\n<h2> 使用子进程</h2>\n</li>\n</ul>\n首先想到的就是子进程\n\nnodejs使用子进程的方式一般是这样的\n\n<pre lang=\"javascript\">	\n     var spawn = require(\"child_process\").spawn;\n     var exepath = \'exe地址\';\n     var args=[];     \n     var childprocess = spawn(exepath, args);\n</pre>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 17:00:09', '2017-02-17 09:00:09', '', '14', 'http://blog.qicheen.com/archives/34', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('35', '1', '2017-02-17 17:18:25', '2017-02-17 09:18:25', '', 'QQ截图20170217171813', '', 'inherit', 'closed', 'closed', '', 'qq%e6%88%aa%e5%9b%be20170217171813', '', '', '2017-02-17 17:18:25', '2017-02-17 09:18:25', '', '14', 'http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png', '0', 'attachment', 'image/png', '0');
INSERT INTO `wp_posts` VALUES ('36', '1', '2017-02-17 17:14:22', '2017-02-17 09:14:22', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>\n<h2>使用Edgejs</h2>\n</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<pre lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n示例如下\n<pre lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task Invoke(dynamic data)\n        {\n           return await dosomething();\n         }\n    }\n}</pre>\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\n<ul>\n	<li>\n<h2> 使用子进程</h2>\n</li>\n</ul>\n首先想到的就是子进程\n<ul>\n	<li>初级版</li>\n</ul>\nnodejs使用子进程的方式一般是这样的\n<pre lang=\"javascript\">	\n     var spawn = require(\"child_process\").spawn;\n     var exepath = \'exe地址\';\n     var args=[];     \n     var childprocess = spawn(exepath, args);</pre>\n&nbsp;\n\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 17:14:22', '2017-02-17 09:14:22', '', '14', 'http://blog.qicheen.com/archives/36', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('37', '1', '2017-02-17 17:21:10', '2017-02-17 09:21:10', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>\n<h2>使用Edgejs</h2>\n</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<pre lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n示例如下\n<pre lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task Invoke(dynamic data)\n        {\n           return await dosomething();\n         }\n    }\n}</pre>\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\n<ul>\n	<li>\n<h2> 使用子进程</h2>\n</li>\n</ul>\n首先想到的就是子进程\n<ul>\n	<li>初级版</li>\n</ul>\nnodejs使用子进程的方式一般是这样的\n<pre lang=\"javascript\">	\n     var spawn = require(\"child_process\").spawn;\n     var exepath = \'exe地址\';\n     var args=[];     \n     var childprocess = spawn(exepath, args);</pre>\n&nbsp;\n\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\n<p style=\"text-align: center;\"><img class=\"size-medium wp-image-35 aligncenter\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813-300x85.png\" alt=\"\" width=\"300\" height=\"85\" /></p>\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 17:21:10', '2017-02-17 09:21:10', '', '14', 'http://blog.qicheen.com/archives/37', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('38', '1', '2017-02-17 17:30:43', '2017-02-17 09:30:43', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>\n<h2>使用Edgejs</h2>\n</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<pre lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n示例如下\n<pre lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task Invoke(dynamic data)\n        {\n           return await dosomething();\n         }\n    }\n}</pre>\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\n<ul>\n	<li>\n<h2> 使用子进程</h2>\n</li>\n</ul>\n首先想到的就是子进程\n<ul>\n	<li>初级版</li>\n</ul>\nnodejs使用子进程的方式一般是这样的\n<pre lang=\"javascript\">	\n     var spawn = require(\"child_process\").spawn;\n     var exepath = \'exe地址\';\n     var args=[];     \n     var childprocess = spawn(exepath, args);</pre>\n&nbsp;\n\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\n\n&nbsp;\n\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\n\n对的，就是通过 Main函数的参数获取\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 17:30:43', '2017-02-17 09:30:43', '', '14', 'http://blog.qicheen.com/archives/38', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('39', '1', '2017-02-17 17:32:48', '2017-02-17 09:32:48', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>\n<h2>使用Edgejs</h2>\n</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<pre lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n示例如下\n<pre lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task Invoke(dynamic data)\n        {\n           return await dosomething();\n         }\n    }\n}</pre>\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\n<ul>\n	<li>\n<h2> 使用子进程</h2>\n</li>\n</ul>\n首先想到的就是子进程\n<ul>\n	<li>初级版</li>\n</ul>\nnodejs使用子进程的方式一般是这样的\n<pre lang=\"javascript\">	\n     var spawn = require(\"child_process\").spawn;\n     var exepath = \'exe地址\';\n     var args=[];     \n     var childprocess = spawn(exepath, args);</pre>\n&nbsp;\n\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\n\n&nbsp;\n\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\n\n对的，就是通过 Main函数的参数获取\n\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢，\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 17:32:48', '2017-02-17 09:32:48', '', '14', 'http://blog.qicheen.com/archives/39', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('40', '1', '2017-02-17 18:13:07', '2017-02-17 10:13:07', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>\n<h2>使用Edgejs</h2>\n</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<pre lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n示例如下\n<pre lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task Invoke(dynamic data)\n        {\n           return await dosomething();\n         }\n    }\n}</pre>\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\n<ul>\n	<li>\n<h2> 使用子进程</h2>\n</li>\n</ul>\n首先想到的就是子进程\n<ul>\n	<li>初级版</li>\n</ul>\nnodejs使用子进程的方式一般是这样的\n<pre lang=\"javascript\">	\n     var spawn = require(\"child_process\").spawn;\n     var exepath = \'exe地址\';\n     var args=[];     \n     var childprocess = spawn(exepath, args);</pre>\n&nbsp;\n\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\n\n&nbsp;\n\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\n\n对的，就是通过 Main函数的参数获取\n\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\n\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\n\n也很简单，只要监听 子进程的 stdout的data事件，如下\n\nchildprocess.stdout.on(\'data\', function (data) {\n\nconsole.log(data);\n\n});\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 18:13:07', '2017-02-17 10:13:07', '', '14', 'http://blog.qicheen.com/archives/40', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('41', '1', '2017-02-17 18:15:11', '2017-02-17 10:15:11', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n	<li>\n<h2>使用Edgejs</h2>\n</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\n\n确实强大，示例代码如下：\n<pre lang=\"javascript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</pre>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<pre lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</pre>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n示例如下\n<pre lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task Invoke(dynamic data)\n        {\n           return await dosomething();\n         }\n    }\n}</pre>\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\n<ul>\n	<li>\n<h2> 使用子进程</h2>\n</li>\n</ul>\n首先想到的就是子进程\n<ul>\n	<li>初级版</li>\n</ul>\nnodejs使用子进程的方式一般是这样的\n<pre lang=\"javascript\">	\n     var spawn = require(\"child_process\").spawn;\n     var exepath = \'exe地址\';\n     var args=[];     \n     var childprocess = spawn(exepath, args);</pre>\n&nbsp;\n\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\n\n&nbsp;\n\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\n\n对的，就是通过 Main函数的参数获取\n\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\n\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\n\n也很简单，只要监听 子进程的 stdout的data事件，如下\n\nchildprocess.stdout.on(\'data\', function (data) {\n\nconsole.log(data);\n\n});\n<ul>\n	<li> 高级版</li>\n</ul>\n&nbsp;\n\n&nbsp;\n<ul>\n	<li>终极版</li>\n</ul>\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 18:15:11', '2017-02-17 10:15:11', '', '14', 'http://blog.qicheen.com/archives/41', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('42', '1', '2017-11-16 14:40:41', '2017-11-16 06:40:41', '&nbsp;\n\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\n<ul>\n 	<li>\n<h2>使用Edgejs</h2>\n</li>\n</ul>\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\n\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\" rel=\"noopener\">Edgejs</a>\n\n确实强大，示例代码如下：\n<code lang=\"JavaScript\">var edge = require(\'edge\');\n\nvar helloWorld = edge.func(function () {/*\n    async (input) =&gt; { \n        return \".NET Welcomes \" + input.ToString(); \n    }\n*/});\n\nhelloWorld(\'JavaScript\', function (error, result) {\n    if (error) throw error;\n    console.log(result);\n});</code>\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\n<code lang=\"javascript\">	\n    function loadDll(dllName){\n         var dllImport = null;\n	if(typeof(require) != \'undefined\'){\n		var edge = require(\'edge\');\n		dllImport = edge.func(dllName);\n	}\n	return dllImport;\n};</code>\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\n\n示例如下\n<code lang=\"Java\">namespace demo\n{\n    public class Startup\n    {\n        public async Task Invoke(dynamic data)\n        {\n           return await dosomething();\n         }\n    }\n}</code>\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\n<ul>\n 	<li>\n<h2> 使用子进程</h2>\n</li>\n</ul>\n这么好的解决方案用不了，只能想其他的办法了，首先想到的就是子进程，而且真的解决了我的问题，下面是自己的一点收获\n<ul>\n 	<li>初级版</li>\n</ul>\nnodejs使用子进程的方式一般是这样的\n<code lang=\"javascript\">	\n     var spawn = require(\"child_process\").spawn;\n     var exepath = \'exe地址\';\n     var args=[];     \n     var childprocess = spawn(exepath, args);</code>\n&nbsp;\n\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\n\n&nbsp;\n\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\n\n对的，就是通过 Main函数的参数获取\n\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\n\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\n\n也很简单，只要监听 子进程的 stdout的data事件，如下\n\nchildprocess.stdout.on(\'data\', function (data) {\n\nconsole.log(data);\n\n});\n<ul>\n 	<li> 高级版</li>\n</ul>\n上面是在程序运行之前就要确定需要传递的参数，所以功能有限，不够灵活，如果在exe已经运行的情况下，怎么进行数据交换呢？\n\n先来看看，在nodejs中启动exe子进程后的对象是什么样的\n<p style=\"text-align: center;\"><a href=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\"><img class=\"size-full wp-image-47 aligncenter\" title=\"ChildProcess\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\" alt=\"子进程对象\" width=\"251\" height=\"333\" /></a></p>\n 我们上面监听子进程输出用的是 stdout 这个Socket对象，这是一个只读的Socket，另外子进程对象还有个stdin，这是个只写的Socket，作用就是输入，对于这样的输入，C#中怎么获取呢？\n\n上面C#输出用的是 Console.WriteLine 标准输出，所以，我们用标准输入就可以了，C#标准输入 是 Console.ReadLine\n<ul>\n 	<li>终极版</li>\n</ul>\n至此，我们已经具备了所有与exe双向通讯的条件，但是如果只是简单的标准输入输出，很难与js配合处理复杂的业务场景，我们需要对这样的虚拟通道进行包装\n\n以我们使用nw下的一个场景，node将sql语句发送给子进程exe，子进程执行sql，完成后将结果返回给node，通过上面的方法，我们可以完成\n\nnode发送 -&gt;  C#处理  -&gt;  返回结果\n\n主要流程都没有问题，但是我们的sql语句发送是连续的，就是node会一直发送，exe进行多线程处理，但是完成后返回的结果就懵逼了，谁跟谁啊，完全不知道执行的结果是谁需要的\n\n&nbsp;\n\n针对这个问题，我们可以抽象下，以我们熟悉的   浏览器-&gt;服务器 来类比下，node中每个发送给子进程的sql就相当于一个 浏览器，子进程就相当于服务器，只要我们给每个请求都给一个令牌，在子进程处理后，包装结果，把令牌也同时返回，node这边根据令牌找到相应的方法回调，至此所有问题解决，exe具备了作为node的服务的能力\n\n相关解决方案及代码已开源，详见GitHub\n\n<a title=\"NodeSharp\" href=\"https://github.com/zyyc5/NodeSharp\" target=\"_blank\" rel=\"noopener\">NodeSharp</a>\n\n&nbsp;\n\n&nbsp;\n\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-autosave-v1', '', '', '2017-11-16 14:40:41', '2017-11-16 06:40:41', '', '14', 'http://blog.qicheen.com/archives/42', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('43', '1', '2017-01-05 20:37:57', '2017-01-05 12:37:57', '<ul>\r\n	<li>写Node的C#程序员会Android</li>\r\n	<li></li>\r\n	<li> 记录下自己很多时候想写没写的东西</li>\r\n	<li></li>\r\n	<li>希望能变成自己宝贵的财富</li>\r\n</ul>\r\n<div></div>\r\n<p style=\"text-align: left;\"></p>', '关于', '', 'inherit', 'closed', 'closed', '', '2-revision-3', '', '', '2017-01-05 20:37:57', '2017-01-05 12:37:57', '', '2', 'http://blog.qicheen.com/archives/43', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('44', '1', '2017-02-20 12:45:58', '2017-02-20 04:45:58', '<ul>\r\n	<li>Android小白，中级C#，也做过Java web，现在专心写JS</li>\r\n	<li></li>\r\n	<li>所以持续学习才是程序员的宿命</li>\r\n	<li></li>\r\n	<li> 记录下自己很多时候想写没写的东西</li>\r\n	<li></li>\r\n	<li>整理一下，这些年的技术经验</li>\r\n	<li></li>\r\n	<li>希望能变成自己宝贵的财富</li>\r\n	<li></li>\r\n	<li>zhangyayun1@gmail.com</li>\r\n</ul>\r\n<div></div>\r\n<p style=\"text-align: left;\"></p>', '关于', '', 'inherit', 'closed', 'closed', '', '2-revision-4', '', '', '2017-02-20 12:45:58', '2017-02-20 04:45:58', '', '2', 'http://blog.qicheen.com/archives/44', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('47', '1', '2017-02-23 13:21:23', '2017-02-23 05:21:23', '', 'ChildProcess', '', 'inherit', 'closed', 'closed', '', 'qq%e6%88%aa%e5%9b%be20170223132108', '', '', '2017-02-23 13:21:23', '2017-02-23 05:21:23', '', '14', 'http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png', '0', 'attachment', 'image/png', '0');
INSERT INTO `wp_posts` VALUES ('48', '1', '2017-02-17 18:15:19', '2017-02-17 10:15:19', '&nbsp;\r\n\r\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n	<li>\r\n<h2>使用Edgejs</h2>\r\n</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre lang=\"javascript\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n<pre lang=\"javascript\">	\r\n    function loadDll(dllName){\r\n         var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</pre>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\r\n\r\n示例如下\r\n<pre lang=\"Java\">namespace demo\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task Invoke(dynamic data)\r\n        {\r\n           return await dosomething();\r\n         }\r\n    }\r\n}</pre>\r\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\r\n<ul>\r\n	<li>\r\n<h2> 使用子进程</h2>\r\n</li>\r\n</ul>\r\n首先想到的就是子进程\r\n<ul>\r\n	<li>初级版</li>\r\n</ul>\r\nnodejs使用子进程的方式一般是这样的\r\n<pre lang=\"javascript\">	\r\n     var spawn = require(\"child_process\").spawn;\r\n     var exepath = \'exe地址\';\r\n     var args=[];     \r\n     var childprocess = spawn(exepath, args);</pre>\r\n&nbsp;\r\n\r\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\r\n\r\n对的，就是通过 Main函数的参数获取\r\n\r\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\r\n\r\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\r\n\r\n也很简单，只要监听 子进程的 stdout的data事件，如下\r\n\r\nchildprocess.stdout.on(\'data\', function (data) {\r\n\r\nconsole.log(data);\r\n\r\n});\r\n<ul>\r\n	<li> 高级版</li>\r\n</ul>\r\n&nbsp;\r\n\r\n&nbsp;\r\n<ul>\r\n	<li>终极版</li>\r\n</ul>\r\n&nbsp;\r\n\r\n未完待续。。。', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-17 18:15:19', '2017-02-17 10:15:19', '', '14', 'http://blog.qicheen.com/archives/48', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('52', '1', '2017-02-20 12:47:48', '2017-02-20 04:47:48', '<ul>\r\n	<li>Android入门级选手，中级C#er，也做过Java web，现在专心写JS</li>\r\n	<li></li>\r\n	<li>所以持续学习才是程序员的宿命啊...</li>\r\n	<li></li>\r\n	<li> 记录下自己很多时候想写没写的东西</li>\r\n	<li></li>\r\n	<li>整理一下，这些年的技术经验</li>\r\n	<li></li>\r\n	<li>希望能变成自己宝贵的财富</li>\r\n	<li></li>\r\n	<li>zhangyayun1@gmail.com</li>\r\n</ul>\r\n<div></div>\r\n<p style=\"text-align: left;\"></p>', '关于', '', 'inherit', 'closed', 'closed', '', '2-revision-5', '', '', '2017-02-20 12:47:48', '2017-02-20 04:47:48', '', '2', 'http://blog.qicheen.com/archives/52', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('53', '1', '2017-08-07 16:54:42', '2017-08-07 08:54:42', 'Visual Studio 2017（VS2017）企业版Enterprise 注册码：\r\n\r\n<code lang=\"JavaScript\">\r\nNJVYC-BMHX2-G77MM-4XJMR-6Q8QF\r\n</code>\r\nVisual Studio 2017（VS2017）专业版Professional 激活码key：\r\n\r\n<code lang=\"JavaScript\">\r\nKBJFW-NXHK6-W4WJM-CRMQB-G3CDH\r\n</code>', 'VS2017激活码', '', 'publish', 'closed', 'closed', '', 'vs2017%e6%bf%80%e6%b4%bb%e7%a0%81%e3%80%90visualstudio2017%e5%90%a7%e3%80%91_%e7%99%be%e5%ba%a6%e8%b4%b4%e5%90%a7', '', '', '2017-11-16 15:22:37', '2017-11-16 07:22:37', '', '0', 'http://blog.qicheen.com/?p=53', '0', 'post', '', '0');
INSERT INTO `wp_posts` VALUES ('54', '1', '2017-08-07 16:54:27', '2017-08-07 08:54:27', '', '自动草稿', '', 'inherit', 'closed', 'closed', '', '53-revision-v1', '', '', '2017-08-07 16:54:27', '2017-08-07 08:54:27', '', '53', 'http://blog.qicheen.com/archives/54', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('56', '1', '2017-08-07 16:54:42', '2017-08-07 08:54:42', 'Visual Studio 2017（VS2017） 企业版Enterprise 注册码：NJVYC-BMHX2-G77MM-4XJMR-6Q8QFVisual Studio 2017（VS2017）\r\n\r\n&nbsp;\r\n\r\n专业版Professional 激活码key：KBJFW-NXHK6-W4WJM-CRMQB-G3CDH\r\n\r\n通过<a href=\"https://tieba.baidu.com/p/5013356550\">VS2017激活码【visualstudio2017吧】_百度贴吧</a>.', 'VS2017激活码【visualstudio2017吧】_百度贴吧', '', 'inherit', 'closed', 'closed', '', '53-revision-v1', '', '', '2017-08-07 16:54:42', '2017-08-07 08:54:42', '', '53', 'http://blog.qicheen.com/archives/56', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('57', '1', '2017-08-07 17:47:41', '2017-08-07 09:47:41', 'Visual Studio 2017（VS2017）企业版Enterprise 注册码：\r\n\r\n&nbsp;\r\n\r\nNJVYC-BMHX2-G77MM-4XJMR-6Q8QF\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\nVisual Studio 2017（VS2017）专业版Professional 激活码key：\r\n\r\n&nbsp;\r\n\r\nKBJFW-NXHK6-W4WJM-CRMQB-G3CDH\r\n\r\n通过<a href=\"https://tieba.baidu.com/p/5013356550\">VS2017激活码【visualstudio2017吧】_百度贴吧</a>.', 'VS2017激活码', '', 'inherit', 'closed', 'closed', '', '53-revision-v1', '', '', '2017-08-07 17:47:41', '2017-08-07 09:47:41', '', '53', 'http://blog.qicheen.com/archives/57', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('58', '1', '2017-11-16 15:21:03', '2017-11-16 07:21:03', 'Visual Studio 2017（VS2017）企业版Enterprise 注册码：\n\n&nbsp;\n<code lan\nNJVYC-BMHX2-G77MM-4XJMR-6Q8QF\n\n&nbsp;\n\n&nbsp;\n\nVisual Studio 2017（VS2017）专业版Professional 激活码key：\n\n&nbsp;\n\nKBJFW-NXHK6-W4WJM-CRMQB-G3CDH', 'VS2017激活码', '', 'inherit', 'closed', 'closed', '', '53-autosave-v1', '', '', '2017-11-16 15:21:03', '2017-11-16 07:21:03', '', '53', 'http://blog.qicheen.com/archives/58', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('59', '1', '2017-08-07 17:48:00', '2017-08-07 09:48:00', 'Visual Studio 2017（VS2017）企业版Enterprise 注册码：\r\n\r\n&nbsp;\r\n\r\nNJVYC-BMHX2-G77MM-4XJMR-6Q8QF\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\nVisual Studio 2017（VS2017）专业版Professional 激活码key：\r\n\r\n&nbsp;\r\n\r\nKBJFW-NXHK6-W4WJM-CRMQB-G3CDH', 'VS2017激活码', '', 'inherit', 'closed', 'closed', '', '53-revision-v1', '', '', '2017-08-07 17:48:00', '2017-08-07 09:48:00', '', '53', 'http://blog.qicheen.com/archives/59', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('60', '1', '2017-02-23 14:01:41', '2017-02-23 06:01:41', '&nbsp;\r\n\r\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n	<li>\r\n<h2>使用Edgejs</h2>\r\n</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre lang=\"javascript\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n<pre lang=\"javascript\">	\r\n    function loadDll(dllName){\r\n         var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</pre>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\r\n\r\n示例如下\r\n<pre lang=\"Java\">namespace demo\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task Invoke(dynamic data)\r\n        {\r\n           return await dosomething();\r\n         }\r\n    }\r\n}</pre>\r\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\r\n<ul>\r\n	<li>\r\n<h2> 使用子进程</h2>\r\n</li>\r\n</ul>\r\n这么好的解决方案用不了，只能想其他的办法了，首先想到的就是子进程，而且真的解决了我的问题，下面是自己的一点收获\r\n<ul>\r\n	<li>初级版</li>\r\n</ul>\r\nnodejs使用子进程的方式一般是这样的\r\n<pre lang=\"javascript\">	\r\n     var spawn = require(\"child_process\").spawn;\r\n     var exepath = \'exe地址\';\r\n     var args=[];     \r\n     var childprocess = spawn(exepath, args);</pre>\r\n&nbsp;\r\n\r\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\r\n\r\n对的，就是通过 Main函数的参数获取\r\n\r\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\r\n\r\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\r\n\r\n也很简单，只要监听 子进程的 stdout的data事件，如下\r\n\r\nchildprocess.stdout.on(\'data\', function (data) {\r\n\r\nconsole.log(data);\r\n\r\n});\r\n<ul>\r\n	<li> 高级版</li>\r\n</ul>\r\n上面是在程序运行之前就要确定需要传递的参数，所以功能有限，不够灵活，如果在exe已经运行的情况下，怎么进行数据交换呢？\r\n\r\n先来看看，在nodejs中启动exe子进程后的对象是什么样的\r\n<p style=\"text-align: center;\"><a href=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\"><img class=\"size-full wp-image-47 aligncenter\" title=\"ChildProcess\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\" alt=\"子进程对象\" width=\"251\" height=\"333\" /></a></p>\r\n<p style=\"text-align: center;\"></p>\r\n 我们上面监听子进程输出用的是 stdout 这个Socket对象，这是一个只读的Socket，另外子进程对象还有个stdin，这是个只写的Socket，作用就是输入，对于这样的输入，C#中怎么获取呢？\r\n\r\n上面C#输出用的是 Console.WriteLine 标准输出，所以，我们用标准输入就可以了，C#标准输入 是 Console.ReadLine\r\n<ul>\r\n	<li>终极版</li>\r\n</ul>\r\n至此，我们已经具备了所有与exe双向通讯的条件，但是如果只是简单的标准输入输出，很难与js配合处理复杂的业务场景，我们需要对这样的虚拟通道进行包装\r\n\r\n以我们使用nw下的一个场景，node将sql语句发送给子进程exe，子进程执行sql，完成后将结果返回给node，通过上面的方法，我们可以完成\r\n\r\nnode发送 -&gt;  C#处理  -&gt;  返回结果\r\n\r\n主要流程都没有问题，但是我们的sql语句发送是连续的，就是node会一直发送，exe进行多线程处理，但是完成后返回的结果就懵逼了，谁跟谁啊，完全不知道执行的结果是谁需要的\r\n\r\n&nbsp;\r\n\r\n针对这个问题，我们可以抽象下，以我们熟悉的   浏览器-&gt;服务器 来类比下，node中每个发送给子进程的sql就相当于一个 浏览器，子进程就相当于服务器，只要我们给每个请求都给一个令牌，在子进程处理后，包装结果，把令牌也同时返回，node这边根据令牌找到相应的方法回调，至此所有问题解决，exe具备了作为node的服务的能力\r\n\r\n相关解决方案及代码已开源，详见GitHub\r\n\r\n<a title=\"NodeSharp\" href=\"https://github.com/zyyc5/NodeSharp\" target=\"_blank\">NodeSharp</a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-02-23 14:01:41', '2017-02-23 06:01:41', '', '14', 'http://blog.qicheen.com/archives/60', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('64', '1', '2017-03-23 09:57:59', '2017-03-23 01:57:59', '<ul>\r\n	<li>Android入门级选手，高级C#er，也做过Java web，现在专心写JS</li>\r\n	<li></li>\r\n	<li>所以持续学习才是程序员的宿命啊...</li>\r\n	<li></li>\r\n	<li> 记录下自己很多时候想写没写的东西</li>\r\n	<li></li>\r\n	<li>整理一下，这些年的技术经验</li>\r\n	<li></li>\r\n	<li>希望能变成自己宝贵的财富</li>\r\n	<li></li>\r\n	<li>zhangyayun1@gmail.com</li>\r\n</ul>\r\n<div></div>\r\n<p style=\"text-align: left;\"></p>', '关于', '', 'inherit', 'closed', 'closed', '', '2-revision-6', '', '', '2017-03-23 09:57:59', '2017-03-23 01:57:59', '', '2', 'http://blog.qicheen.com/archives/64', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('66', '1', '2017-11-16 14:27:17', '2017-11-16 06:27:17', '&nbsp;\r\n\r\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n 	<li>\r\n<h2>使用Edgejs</h2>\r\n</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\" rel=\"noopener\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre lang=\"javascript\"><code>var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</code></pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n<pre lang=\"javascript\">	\r\n    function loadDll(dllName){\r\n         var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</pre>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\r\n\r\n示例如下\r\n<pre lang=\"Java\">namespace demo\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task Invoke(dynamic data)\r\n        {\r\n           return await dosomething();\r\n         }\r\n    }\r\n}</pre>\r\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\r\n<ul>\r\n 	<li>\r\n<h2> 使用子进程</h2>\r\n</li>\r\n</ul>\r\n这么好的解决方案用不了，只能想其他的办法了，首先想到的就是子进程，而且真的解决了我的问题，下面是自己的一点收获\r\n<ul>\r\n 	<li>初级版</li>\r\n</ul>\r\nnodejs使用子进程的方式一般是这样的\r\n<pre lang=\"javascript\">	\r\n     var spawn = require(\"child_process\").spawn;\r\n     var exepath = \'exe地址\';\r\n     var args=[];     \r\n     var childprocess = spawn(exepath, args);</pre>\r\n&nbsp;\r\n\r\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\r\n\r\n对的，就是通过 Main函数的参数获取\r\n\r\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\r\n\r\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\r\n\r\n也很简单，只要监听 子进程的 stdout的data事件，如下\r\n\r\nchildprocess.stdout.on(\'data\', function (data) {\r\n\r\nconsole.log(data);\r\n\r\n});\r\n<ul>\r\n 	<li> 高级版</li>\r\n</ul>\r\n上面是在程序运行之前就要确定需要传递的参数，所以功能有限，不够灵活，如果在exe已经运行的情况下，怎么进行数据交换呢？\r\n\r\n先来看看，在nodejs中启动exe子进程后的对象是什么样的\r\n<p style=\"text-align: center;\"><a href=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\"><img class=\"size-full wp-image-47 aligncenter\" title=\"ChildProcess\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\" alt=\"子进程对象\" width=\"251\" height=\"333\" /></a></p>\r\n 我们上面监听子进程输出用的是 stdout 这个Socket对象，这是一个只读的Socket，另外子进程对象还有个stdin，这是个只写的Socket，作用就是输入，对于这样的输入，C#中怎么获取呢？\r\n\r\n上面C#输出用的是 Console.WriteLine 标准输出，所以，我们用标准输入就可以了，C#标准输入 是 Console.ReadLine\r\n<ul>\r\n 	<li>终极版</li>\r\n</ul>\r\n至此，我们已经具备了所有与exe双向通讯的条件，但是如果只是简单的标准输入输出，很难与js配合处理复杂的业务场景，我们需要对这样的虚拟通道进行包装\r\n\r\n以我们使用nw下的一个场景，node将sql语句发送给子进程exe，子进程执行sql，完成后将结果返回给node，通过上面的方法，我们可以完成\r\n\r\nnode发送 -&gt;  C#处理  -&gt;  返回结果\r\n\r\n主要流程都没有问题，但是我们的sql语句发送是连续的，就是node会一直发送，exe进行多线程处理，但是完成后返回的结果就懵逼了，谁跟谁啊，完全不知道执行的结果是谁需要的\r\n\r\n&nbsp;\r\n\r\n针对这个问题，我们可以抽象下，以我们熟悉的   浏览器-&gt;服务器 来类比下，node中每个发送给子进程的sql就相当于一个 浏览器，子进程就相当于服务器，只要我们给每个请求都给一个令牌，在子进程处理后，包装结果，把令牌也同时返回，node这边根据令牌找到相应的方法回调，至此所有问题解决，exe具备了作为node的服务的能力\r\n\r\n相关解决方案及代码已开源，详见GitHub\r\n\r\n<a title=\"NodeSharp\" href=\"https://github.com/zyyc5/NodeSharp\" target=\"_blank\" rel=\"noopener\">NodeSharp</a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-11-16 14:27:17', '2017-11-16 06:27:17', '', '14', 'http://blog.qicheen.com/archives/66', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('67', '1', '2017-11-16 14:29:17', '2017-11-16 06:29:17', '&nbsp;\r\n\r\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n 	<li>\r\n<h2>使用Edgejs</h2>\r\n</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\" rel=\"noopener\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre lang=\"javascript\"><code class=\"C#\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</code></pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n<pre lang=\"javascript\">	\r\n    function loadDll(dllName){\r\n         var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</pre>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\r\n\r\n示例如下\r\n<pre lang=\"Java\">namespace demo\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task Invoke(dynamic data)\r\n        {\r\n           return await dosomething();\r\n         }\r\n    }\r\n}</pre>\r\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\r\n<ul>\r\n 	<li>\r\n<h2> 使用子进程</h2>\r\n</li>\r\n</ul>\r\n这么好的解决方案用不了，只能想其他的办法了，首先想到的就是子进程，而且真的解决了我的问题，下面是自己的一点收获\r\n<ul>\r\n 	<li>初级版</li>\r\n</ul>\r\nnodejs使用子进程的方式一般是这样的\r\n<pre lang=\"javascript\">	\r\n     var spawn = require(\"child_process\").spawn;\r\n     var exepath = \'exe地址\';\r\n     var args=[];     \r\n     var childprocess = spawn(exepath, args);</pre>\r\n&nbsp;\r\n\r\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\r\n\r\n对的，就是通过 Main函数的参数获取\r\n\r\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\r\n\r\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\r\n\r\n也很简单，只要监听 子进程的 stdout的data事件，如下\r\n\r\nchildprocess.stdout.on(\'data\', function (data) {\r\n\r\nconsole.log(data);\r\n\r\n});\r\n<ul>\r\n 	<li> 高级版</li>\r\n</ul>\r\n上面是在程序运行之前就要确定需要传递的参数，所以功能有限，不够灵活，如果在exe已经运行的情况下，怎么进行数据交换呢？\r\n\r\n先来看看，在nodejs中启动exe子进程后的对象是什么样的\r\n<p style=\"text-align: center;\"><a href=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\"><img class=\"size-full wp-image-47 aligncenter\" title=\"ChildProcess\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\" alt=\"子进程对象\" width=\"251\" height=\"333\" /></a></p>\r\n 我们上面监听子进程输出用的是 stdout 这个Socket对象，这是一个只读的Socket，另外子进程对象还有个stdin，这是个只写的Socket，作用就是输入，对于这样的输入，C#中怎么获取呢？\r\n\r\n上面C#输出用的是 Console.WriteLine 标准输出，所以，我们用标准输入就可以了，C#标准输入 是 Console.ReadLine\r\n<ul>\r\n 	<li>终极版</li>\r\n</ul>\r\n至此，我们已经具备了所有与exe双向通讯的条件，但是如果只是简单的标准输入输出，很难与js配合处理复杂的业务场景，我们需要对这样的虚拟通道进行包装\r\n\r\n以我们使用nw下的一个场景，node将sql语句发送给子进程exe，子进程执行sql，完成后将结果返回给node，通过上面的方法，我们可以完成\r\n\r\nnode发送 -&gt;  C#处理  -&gt;  返回结果\r\n\r\n主要流程都没有问题，但是我们的sql语句发送是连续的，就是node会一直发送，exe进行多线程处理，但是完成后返回的结果就懵逼了，谁跟谁啊，完全不知道执行的结果是谁需要的\r\n\r\n&nbsp;\r\n\r\n针对这个问题，我们可以抽象下，以我们熟悉的   浏览器-&gt;服务器 来类比下，node中每个发送给子进程的sql就相当于一个 浏览器，子进程就相当于服务器，只要我们给每个请求都给一个令牌，在子进程处理后，包装结果，把令牌也同时返回，node这边根据令牌找到相应的方法回调，至此所有问题解决，exe具备了作为node的服务的能力\r\n\r\n相关解决方案及代码已开源，详见GitHub\r\n\r\n<a title=\"NodeSharp\" href=\"https://github.com/zyyc5/NodeSharp\" target=\"_blank\" rel=\"noopener\">NodeSharp</a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-11-16 14:29:17', '2017-11-16 06:29:17', '', '14', 'http://blog.qicheen.com/archives/67', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('68', '1', '2017-11-16 14:30:52', '2017-11-16 06:30:52', '&nbsp;\r\n\r\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n 	<li>\r\n<h2>使用Edgejs</h2>\r\n</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\" rel=\"noopener\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<pre lang=\"javascript\"><code class=\"JavaScript\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</code></pre>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n<pre lang=\"javascript\">	\r\n    function loadDll(dllName){\r\n         var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</pre>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\r\n\r\n示例如下\r\n<pre lang=\"Java\">namespace demo\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task Invoke(dynamic data)\r\n        {\r\n           return await dosomething();\r\n         }\r\n    }\r\n}</pre>\r\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\r\n<ul>\r\n 	<li>\r\n<h2> 使用子进程</h2>\r\n</li>\r\n</ul>\r\n这么好的解决方案用不了，只能想其他的办法了，首先想到的就是子进程，而且真的解决了我的问题，下面是自己的一点收获\r\n<ul>\r\n 	<li>初级版</li>\r\n</ul>\r\nnodejs使用子进程的方式一般是这样的\r\n<pre lang=\"javascript\">	\r\n     var spawn = require(\"child_process\").spawn;\r\n     var exepath = \'exe地址\';\r\n     var args=[];     \r\n     var childprocess = spawn(exepath, args);</pre>\r\n&nbsp;\r\n\r\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\r\n\r\n对的，就是通过 Main函数的参数获取\r\n\r\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\r\n\r\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\r\n\r\n也很简单，只要监听 子进程的 stdout的data事件，如下\r\n\r\nchildprocess.stdout.on(\'data\', function (data) {\r\n\r\nconsole.log(data);\r\n\r\n});\r\n<ul>\r\n 	<li> 高级版</li>\r\n</ul>\r\n上面是在程序运行之前就要确定需要传递的参数，所以功能有限，不够灵活，如果在exe已经运行的情况下，怎么进行数据交换呢？\r\n\r\n先来看看，在nodejs中启动exe子进程后的对象是什么样的\r\n<p style=\"text-align: center;\"><a href=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\"><img class=\"size-full wp-image-47 aligncenter\" title=\"ChildProcess\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\" alt=\"子进程对象\" width=\"251\" height=\"333\" /></a></p>\r\n 我们上面监听子进程输出用的是 stdout 这个Socket对象，这是一个只读的Socket，另外子进程对象还有个stdin，这是个只写的Socket，作用就是输入，对于这样的输入，C#中怎么获取呢？\r\n\r\n上面C#输出用的是 Console.WriteLine 标准输出，所以，我们用标准输入就可以了，C#标准输入 是 Console.ReadLine\r\n<ul>\r\n 	<li>终极版</li>\r\n</ul>\r\n至此，我们已经具备了所有与exe双向通讯的条件，但是如果只是简单的标准输入输出，很难与js配合处理复杂的业务场景，我们需要对这样的虚拟通道进行包装\r\n\r\n以我们使用nw下的一个场景，node将sql语句发送给子进程exe，子进程执行sql，完成后将结果返回给node，通过上面的方法，我们可以完成\r\n\r\nnode发送 -&gt;  C#处理  -&gt;  返回结果\r\n\r\n主要流程都没有问题，但是我们的sql语句发送是连续的，就是node会一直发送，exe进行多线程处理，但是完成后返回的结果就懵逼了，谁跟谁啊，完全不知道执行的结果是谁需要的\r\n\r\n&nbsp;\r\n\r\n针对这个问题，我们可以抽象下，以我们熟悉的   浏览器-&gt;服务器 来类比下，node中每个发送给子进程的sql就相当于一个 浏览器，子进程就相当于服务器，只要我们给每个请求都给一个令牌，在子进程处理后，包装结果，把令牌也同时返回，node这边根据令牌找到相应的方法回调，至此所有问题解决，exe具备了作为node的服务的能力\r\n\r\n相关解决方案及代码已开源，详见GitHub\r\n\r\n<a title=\"NodeSharp\" href=\"https://github.com/zyyc5/NodeSharp\" target=\"_blank\" rel=\"noopener\">NodeSharp</a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-11-16 14:30:52', '2017-11-16 06:30:52', '', '14', 'http://blog.qicheen.com/archives/68', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('69', '1', '2017-11-16 14:39:39', '2017-11-16 06:39:39', '&nbsp;\r\n\r\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n 	<li>\r\n<h2>使用Edgejs</h2>\r\n</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\" rel=\"noopener\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<code lang=\"JavaScript\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</code>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n<pre lang=\"javascript\">	\r\n    function loadDll(dllName){\r\n         var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</pre>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\r\n\r\n示例如下\r\n<pre lang=\"Java\">namespace demo\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task Invoke(dynamic data)\r\n        {\r\n           return await dosomething();\r\n         }\r\n    }\r\n}</pre>\r\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\r\n<ul>\r\n 	<li>\r\n<h2> 使用子进程</h2>\r\n</li>\r\n</ul>\r\n这么好的解决方案用不了，只能想其他的办法了，首先想到的就是子进程，而且真的解决了我的问题，下面是自己的一点收获\r\n<ul>\r\n 	<li>初级版</li>\r\n</ul>\r\nnodejs使用子进程的方式一般是这样的\r\n<pre lang=\"javascript\">	\r\n     var spawn = require(\"child_process\").spawn;\r\n     var exepath = \'exe地址\';\r\n     var args=[];     \r\n     var childprocess = spawn(exepath, args);</pre>\r\n&nbsp;\r\n\r\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\r\n\r\n对的，就是通过 Main函数的参数获取\r\n\r\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\r\n\r\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\r\n\r\n也很简单，只要监听 子进程的 stdout的data事件，如下\r\n\r\nchildprocess.stdout.on(\'data\', function (data) {\r\n\r\nconsole.log(data);\r\n\r\n});\r\n<ul>\r\n 	<li> 高级版</li>\r\n</ul>\r\n上面是在程序运行之前就要确定需要传递的参数，所以功能有限，不够灵活，如果在exe已经运行的情况下，怎么进行数据交换呢？\r\n\r\n先来看看，在nodejs中启动exe子进程后的对象是什么样的\r\n<p style=\"text-align: center;\"><a href=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\"><img class=\"size-full wp-image-47 aligncenter\" title=\"ChildProcess\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\" alt=\"子进程对象\" width=\"251\" height=\"333\" /></a></p>\r\n 我们上面监听子进程输出用的是 stdout 这个Socket对象，这是一个只读的Socket，另外子进程对象还有个stdin，这是个只写的Socket，作用就是输入，对于这样的输入，C#中怎么获取呢？\r\n\r\n上面C#输出用的是 Console.WriteLine 标准输出，所以，我们用标准输入就可以了，C#标准输入 是 Console.ReadLine\r\n<ul>\r\n 	<li>终极版</li>\r\n</ul>\r\n至此，我们已经具备了所有与exe双向通讯的条件，但是如果只是简单的标准输入输出，很难与js配合处理复杂的业务场景，我们需要对这样的虚拟通道进行包装\r\n\r\n以我们使用nw下的一个场景，node将sql语句发送给子进程exe，子进程执行sql，完成后将结果返回给node，通过上面的方法，我们可以完成\r\n\r\nnode发送 -&gt;  C#处理  -&gt;  返回结果\r\n\r\n主要流程都没有问题，但是我们的sql语句发送是连续的，就是node会一直发送，exe进行多线程处理，但是完成后返回的结果就懵逼了，谁跟谁啊，完全不知道执行的结果是谁需要的\r\n\r\n&nbsp;\r\n\r\n针对这个问题，我们可以抽象下，以我们熟悉的   浏览器-&gt;服务器 来类比下，node中每个发送给子进程的sql就相当于一个 浏览器，子进程就相当于服务器，只要我们给每个请求都给一个令牌，在子进程处理后，包装结果，把令牌也同时返回，node这边根据令牌找到相应的方法回调，至此所有问题解决，exe具备了作为node的服务的能力\r\n\r\n相关解决方案及代码已开源，详见GitHub\r\n\r\n<a title=\"NodeSharp\" href=\"https://github.com/zyyc5/NodeSharp\" target=\"_blank\" rel=\"noopener\">NodeSharp</a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-11-16 14:39:39', '2017-11-16 06:39:39', '', '14', 'http://blog.qicheen.com/archives/69', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('70', '1', '2017-11-16 14:40:42', '2017-11-16 06:40:42', '&nbsp;\r\n\r\n需求背景：公司产品是餐饮POS，使用的技术栈是 nw.js(一个带node执行环境的chrome壳子)，需要对接很多硬件，但是很多硬件是只提供dll驱动，如果用nodejs的话是很难对接的，所以就引出这样的需求\r\n<ul>\r\n 	<li>\r\n<h2>使用Edgejs</h2>\r\n</li>\r\n</ul>\r\n网上一般提供的方案一般是使用Edgejs，直接在js里执行C#代码\r\n\r\n<a title=\"edgejs\" href=\"https://github.com/tjanczuk/edge\" target=\"_blank\" rel=\"noopener\">Edgejs</a>\r\n\r\n确实强大，示例代码如下：\r\n<code lang=\"JavaScript\">var edge = require(\'edge\');\r\n\r\nvar helloWorld = edge.func(function () {/*\r\n    async (input) =&gt; { \r\n        return \".NET Welcomes \" + input.ToString(); \r\n    }\r\n*/});\r\n\r\nhelloWorld(\'JavaScript\', function (error, result) {\r\n    if (error) throw error;\r\n    console.log(result);\r\n});</code>\r\n可以直接在js中写C#代码，也可以像这样，调用C#写的dll\r\n<code lang=\"javascript\">	\r\n    function loadDll(dllName){\r\n         var dllImport = null;\r\n	if(typeof(require) != \'undefined\'){\r\n		var edge = require(\'edge\');\r\n		dllImport = edge.func(dllName);\r\n	}\r\n	return dllImport;\r\n};</code>\r\n对于dll有些要求，例如，我们的dll名称为 demo.dll,那么必须有个demo的namespace，然后这个namespace下必须有个Startup类，这个类还得有个 invoke公开方法\r\n\r\n示例如下\r\n<code lang=\"Java\">namespace demo\r\n{\r\n    public class Startup\r\n    {\r\n        public async Task Invoke(dynamic data)\r\n        {\r\n           return await dosomething();\r\n         }\r\n    }\r\n}</code>\r\n一切都很完美，直到有一天，来了个新需求，需要我们支持XP系统（很无奈，很多小店的确还在用XP的系统），注意上面的C#代码，使用了 async await，这个只在 .net4.5 开始支持，而 .net 4.5已经放弃对XP的支持，XP下最高只能安装 .net 4.0,心塞...\r\n<ul>\r\n 	<li>\r\n<h2> 使用子进程</h2>\r\n</li>\r\n</ul>\r\n这么好的解决方案用不了，只能想其他的办法了，首先想到的就是子进程，而且真的解决了我的问题，下面是自己的一点收获\r\n<ul>\r\n 	<li>初级版</li>\r\n</ul>\r\nnodejs使用子进程的方式一般是这样的\r\n<code lang=\"javascript\">	\r\n     var spawn = require(\"child_process\").spawn;\r\n     var exepath = \'exe地址\';\r\n     var args=[];     \r\n     var childprocess = spawn(exepath, args);</code>\r\n&nbsp;\r\n\r\n信息传递的话，就是通过 上面的 args参数；那么C#中怎么获取参数呢？新建一个空的控制台项目，打开 Program.cs\r\n\r\n&nbsp;\r\n\r\n<img class=\"alignnone size-full wp-image-35\" title=\"QQ截图20170217171813\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170217171813.png\" alt=\"\" width=\"791\" height=\"225\" />\r\n\r\n对的，就是通过 Main函数的参数获取\r\n\r\n我们可以通过传递不同的参数来控制C#执行不同的代码，那么执行完成后怎么把结果返回呢\r\n\r\n很简单 直接Console.WriteLine 标准输出，那对于输出的结果又怎么获取呢？\r\n\r\n也很简单，只要监听 子进程的 stdout的data事件，如下\r\n\r\nchildprocess.stdout.on(\'data\', function (data) {\r\n\r\nconsole.log(data);\r\n\r\n});\r\n<ul>\r\n 	<li> 高级版</li>\r\n</ul>\r\n上面是在程序运行之前就要确定需要传递的参数，所以功能有限，不够灵活，如果在exe已经运行的情况下，怎么进行数据交换呢？\r\n\r\n先来看看，在nodejs中启动exe子进程后的对象是什么样的\r\n<p style=\"text-align: center;\"><a href=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\"><img class=\"size-full wp-image-47 aligncenter\" title=\"ChildProcess\" src=\"http://yzxy-wordpress.stor.sinaapp.com/uploads/2017/02/QQ截图20170223132108.png\" alt=\"子进程对象\" width=\"251\" height=\"333\" /></a></p>\r\n 我们上面监听子进程输出用的是 stdout 这个Socket对象，这是一个只读的Socket，另外子进程对象还有个stdin，这是个只写的Socket，作用就是输入，对于这样的输入，C#中怎么获取呢？\r\n\r\n上面C#输出用的是 Console.WriteLine 标准输出，所以，我们用标准输入就可以了，C#标准输入 是 Console.ReadLine\r\n<ul>\r\n 	<li>终极版</li>\r\n</ul>\r\n至此，我们已经具备了所有与exe双向通讯的条件，但是如果只是简单的标准输入输出，很难与js配合处理复杂的业务场景，我们需要对这样的虚拟通道进行包装\r\n\r\n以我们使用nw下的一个场景，node将sql语句发送给子进程exe，子进程执行sql，完成后将结果返回给node，通过上面的方法，我们可以完成\r\n\r\nnode发送 -&gt;  C#处理  -&gt;  返回结果\r\n\r\n主要流程都没有问题，但是我们的sql语句发送是连续的，就是node会一直发送，exe进行多线程处理，但是完成后返回的结果就懵逼了，谁跟谁啊，完全不知道执行的结果是谁需要的\r\n\r\n&nbsp;\r\n\r\n针对这个问题，我们可以抽象下，以我们熟悉的   浏览器-&gt;服务器 来类比下，node中每个发送给子进程的sql就相当于一个 浏览器，子进程就相当于服务器，只要我们给每个请求都给一个令牌，在子进程处理后，包装结果，把令牌也同时返回，node这边根据令牌找到相应的方法回调，至此所有问题解决，exe具备了作为node的服务的能力\r\n\r\n相关解决方案及代码已开源，详见GitHub\r\n\r\n<a title=\"NodeSharp\" href=\"https://github.com/zyyc5/NodeSharp\" target=\"_blank\" rel=\"noopener\">NodeSharp</a>\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\n&nbsp;', 'Nodejs与C#之间通信实现方式', '', 'inherit', 'closed', 'closed', '', '14-revision-v1', '', '', '2017-11-16 14:40:42', '2017-11-16 06:40:42', '', '14', 'http://blog.qicheen.com/archives/70', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('73', '1', '2017-11-16 15:21:19', '2017-11-16 07:21:19', 'Visual Studio 2017（VS2017）企业版Enterprise 注册码：\r\n\r\n&nbsp;\r\n<code lang=\"JavaScript\">\r\nNJVYC-BMHX2-G77MM-4XJMR-6Q8QF\r\n\r\n&nbsp;\r\n\r\n&nbsp;\r\n\r\nVisual Studio 2017（VS2017）专业版Professional 激活码key：\r\n\r\n&nbsp;\r\n\r\nKBJFW-NXHK6-W4WJM-CRMQB-G3CDH\r\n</code>', 'VS2017激活码', '', 'inherit', 'closed', 'closed', '', '53-revision-v1', '', '', '2017-11-16 15:21:19', '2017-11-16 07:21:19', '', '53', 'http://blog.qicheen.com/?p=73', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('74', '1', '2017-11-16 15:22:12', '2017-11-16 07:22:12', 'Visual Studio 2017（VS2017）企业版Enterprise 注册码：\r\n\r\n&nbsp;\r\n<code lang=\"JavaScript\">\r\nNJVYC-BMHX2-G77MM-4XJMR-6Q8QF\r\n/code>\r\nVisual Studio 2017（VS2017）专业版Professional 激活码key：\r\n\r\n<code lang=\"JavaScript\">\r\nKBJFW-NXHK6-W4WJM-CRMQB-G3CDH\r\n</code>', 'VS2017激活码', '', 'inherit', 'closed', 'closed', '', '53-revision-v1', '', '', '2017-11-16 15:22:12', '2017-11-16 07:22:12', '', '53', 'http://blog.qicheen.com/?p=74', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('75', '1', '2017-11-16 15:22:24', '2017-11-16 07:22:24', 'Visual Studio 2017（VS2017）企业版Enterprise 注册码：\r\n\r\n&nbsp;\r\n<code lang=\"JavaScript\">\r\nNJVYC-BMHX2-G77MM-4XJMR-6Q8QF\r\n</code>\r\nVisual Studio 2017（VS2017）专业版Professional 激活码key：\r\n\r\n<code lang=\"JavaScript\">\r\nKBJFW-NXHK6-W4WJM-CRMQB-G3CDH\r\n</code>', 'VS2017激活码', '', 'inherit', 'closed', 'closed', '', '53-revision-v1', '', '', '2017-11-16 15:22:24', '2017-11-16 07:22:24', '', '53', 'http://blog.qicheen.com/?p=75', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('76', '1', '2017-11-16 15:22:37', '2017-11-16 07:22:37', 'Visual Studio 2017（VS2017）企业版Enterprise 注册码：\r\n\r\n<code lang=\"JavaScript\">\r\nNJVYC-BMHX2-G77MM-4XJMR-6Q8QF\r\n</code>\r\nVisual Studio 2017（VS2017）专业版Professional 激活码key：\r\n\r\n<code lang=\"JavaScript\">\r\nKBJFW-NXHK6-W4WJM-CRMQB-G3CDH\r\n</code>', 'VS2017激活码', '', 'inherit', 'closed', 'closed', '', '53-revision-v1', '', '', '2017-11-16 15:22:37', '2017-11-16 07:22:37', '', '53', 'http://blog.qicheen.com/?p=76', '0', 'revision', '', '0');
INSERT INTO `wp_posts` VALUES ('77', '1', '2018-05-06 20:33:06', '0000-00-00 00:00:00', '', '自动草稿', '', 'auto-draft', 'closed', 'closed', '', '', '', '', '2018-05-06 20:33:06', '0000-00-00 00:00:00', '', '0', 'http://blog.qicheen.com/?p=77', '0', 'post', '', '0');

-- ----------------------------
-- Table structure for wp_termmeta
-- ----------------------------
DROP TABLE IF EXISTS `wp_termmeta`;
CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_520_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_520_ci,
  PRIMARY KEY (`meta_id`),
  KEY `term_id` (`term_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_520_ci;

-- ----------------------------
-- Records of wp_termmeta
-- ----------------------------

-- ----------------------------
-- Table structure for wp_terms
-- ----------------------------
DROP TABLE IF EXISTS `wp_terms`;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `slug` (`slug`(191)),
  KEY `name` (`name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_terms
-- ----------------------------
INSERT INTO `wp_terms` VALUES ('1', '未分类', 'uncategorized', '0');
INSERT INTO `wp_terms` VALUES ('2', '链接表', '%e9%93%be%e6%8e%a5%e8%a1%a8', '0');
INSERT INTO `wp_terms` VALUES ('3', 'node.js', 'node', '0');
INSERT INTO `wp_terms` VALUES ('4', 'node.js', 'node-js', '0');

-- ----------------------------
-- Table structure for wp_term_relationships
-- ----------------------------
DROP TABLE IF EXISTS `wp_term_relationships`;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_term_relationships
-- ----------------------------
INSERT INTO `wp_term_relationships` VALUES ('2', '2', '0');
INSERT INTO `wp_term_relationships` VALUES ('14', '4', '0');
INSERT INTO `wp_term_relationships` VALUES ('53', '4', '0');

-- ----------------------------
-- Table structure for wp_term_taxonomy
-- ----------------------------
DROP TABLE IF EXISTS `wp_term_taxonomy`;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_term_taxonomy
-- ----------------------------
INSERT INTO `wp_term_taxonomy` VALUES ('1', '1', 'category', '', '0', '0');
INSERT INTO `wp_term_taxonomy` VALUES ('2', '2', 'link_category', '', '0', '1');
INSERT INTO `wp_term_taxonomy` VALUES ('3', '3', 'post_tag', '', '0', '0');
INSERT INTO `wp_term_taxonomy` VALUES ('4', '4', 'category', '', '0', '2');

-- ----------------------------
-- Table structure for wp_usermeta
-- ----------------------------
DROP TABLE IF EXISTS `wp_usermeta`;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_usermeta
-- ----------------------------
INSERT INTO `wp_usermeta` VALUES ('1', '1', 'first_name', '');
INSERT INTO `wp_usermeta` VALUES ('2', '1', 'last_name', '');
INSERT INTO `wp_usermeta` VALUES ('3', '1', 'nickname', '云醉晓月');
INSERT INTO `wp_usermeta` VALUES ('4', '1', 'description', '');
INSERT INTO `wp_usermeta` VALUES ('5', '1', 'rich_editing', 'true');
INSERT INTO `wp_usermeta` VALUES ('6', '1', 'comment_shortcuts', 'false');
INSERT INTO `wp_usermeta` VALUES ('7', '1', 'admin_color', 'ocean');
INSERT INTO `wp_usermeta` VALUES ('8', '1', 'use_ssl', '0');
INSERT INTO `wp_usermeta` VALUES ('9', '1', 'show_admin_bar_front', 'true');
INSERT INTO `wp_usermeta` VALUES ('10', '1', 'wp_capabilities', 'a:1:{s:13:\"administrator\";s:1:\"1\";}');
INSERT INTO `wp_usermeta` VALUES ('11', '1', 'wp_user_level', '10');
INSERT INTO `wp_usermeta` VALUES ('12', '1', 'dismissed_wp_pointers', 'wp330_toolbar,wp330_media_uploader,wp330_saving_widgets,wp340_choose_image_from_library,wp340_customize_current_theme_link,plugin_editor_notice,theme_editor_notice');
INSERT INTO `wp_usermeta` VALUES ('13', '1', 'show_welcome_panel', '1');
INSERT INTO `wp_usermeta` VALUES ('14', '1', 'wp_dashboard_quick_press_last_post_id', '77');
INSERT INTO `wp_usermeta` VALUES ('15', '1', 'managenav-menuscolumnshidden', 'a:4:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";}');
INSERT INTO `wp_usermeta` VALUES ('16', '1', 'metaboxhidden_nav-menus', 'a:2:{i:0;s:8:\"add-post\";i:1;s:12:\"add-post_tag\";}');
INSERT INTO `wp_usermeta` VALUES ('17', '1', 'wp_user-settings', 'hidetb=1&editor=html&urlbutton=none&imgsize=full&align=center');
INSERT INTO `wp_usermeta` VALUES ('18', '1', 'wp_user-settings-time', '1510813633');
INSERT INTO `wp_usermeta` VALUES ('19', '1', 'session_tokens', 'a:1:{s:64:\"8a3486d14097b5fa48151a124b700b8e00a7de8e14e63cd5a599c23e886d8df6\";a:4:{s:10:\"expiration\";i:1525782784;s:2:\"ip\";s:12:\"223.64.70.50\";s:2:\"ua\";s:110:\"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36\";s:5:\"login\";i:1525609984;}}');
INSERT INTO `wp_usermeta` VALUES ('20', '1', 'community-events-location', 'a:1:{s:2:\"ip\";s:11:\"223.64.70.0\";}');
INSERT INTO `wp_usermeta` VALUES ('21', '1', 'syntax_highlighting', 'true');
INSERT INTO `wp_usermeta` VALUES ('22', '1', 'locale', 'zh_CN');
INSERT INTO `wp_usermeta` VALUES ('23', '1', 'aim', '');
INSERT INTO `wp_usermeta` VALUES ('24', '1', 'yim', '');
INSERT INTO `wp_usermeta` VALUES ('25', '1', 'jabber', '');

-- ----------------------------
-- Table structure for wp_users
-- ----------------------------
DROP TABLE IF EXISTS `wp_users`;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`),
  KEY `user_email` (`user_email`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- ----------------------------
-- Records of wp_users
-- ----------------------------
INSERT INTO `wp_users` VALUES ('1', 'yzyx', '$P$BYaob0f22vQxMKMdK9d/loAxT/gJo00', 'yzyx', '970677650@qq.com', '', '2017-01-05 11:50:00', '', '0', '云醉晓月');
